---
title: Configuring CF to Route Traffic to Apps on Custom Ports
owner: CF for VMs Networking
---

<% current_page.data.title = "Configuring " + vars.app_runtime_abbr + " to Route Traffic to Apps on Custom Ports" %>

This topic describes how to configure <%= vars.app_runtime_first %> to route traffic to your apps listening on custom ports. 


## <a id="overview"></a> Overview

By default, apps only receive requests on port 8080 for both HTTP and TCP routing, and so must be configured, or hardcoded, to listen on this port. Configuring custom app ports allows developers to bring workloads onto <%= vars.app_runtime_abbr %> that listen on ports other than 8080. Some example use cases are:

* Serving web client requests on one port and offering stats/debug on another

* Using TCP protocols that require multiple ports

* Running Docker images on <%= vars.app_runtime_abbr %>

The procedure below describes how to use the `apps` and `route_mappings` Cloud Controller API endpoints to update the ports the app can receive requests on. 

### <a id="flow"></a> Flow of a Request to an App

The following table describes the Network Address Translation that occurs in the data path of a client request. The procedure in this document discusses configuring _app ports_ specifically.

| Port Type | Description | Network Hop |
| --------- | ----------- | ----------- |
| Route port | The port a client sends a request to | Client to load balancer, load balancer to Gorouter |
| Back end port | The port on the VM where an app container is hosted, which is unique to the container | Gorouter to Diego Cell |
| App port | The port on the container; this must match a port the app is configured to listen on | Diego Cell to app container |

The following diagram provides an example data path and Network Address Translation for TCP routing. For HTTP routing, the route port is always 80 or 443.  

![Traffic-flow-diagram](route_ports.png)


## <a id="prerequisite"></a> Prerequisites

Before following the procedure to configure routing to your app on custom ports, you must have:

* An app pushed to <%= vars.app_runtime_abbr %> that can listen on one or more custom ports.

* Routes for which you want traffic forwarded to your app on custom ports, which are mapped to the app.
	* If your app listens on two ports and you want clients to be able to send requests to both of them, create two routes. These can be from HTTP or TCP domains. Consider an example in which you have two routes: `foo.example.com` and `bar.example.com`. In the following procedure, you use API endpoints to map these routes to your app on the ports it is listening. For more information, see [Routes and Domains](./deploy-apps/routes-domains.html).


## <a id="procedure"></a> Procedure

To configure your app to receive HTTP or TCP traffic on custom ports:

1. Retrieve the GUID of your app by running:

	```
	cf app APP-NAME --guid
	``` 
	Where `APP-NAME` is the name of your app.

1. Retrieve the GUID(s) of your route(s) by running:

  For HTTP routes:
	```
	cf curl /v3/apps/APP-GUID/routes?hosts=ROUTE-HOSTNAME
	```

  For `tcp` routes:
  ```
  cf curl /v3/apps/APP-GUID/routes?port=PORT
  ```

	Where:
	* `APP-GUID` is the GUID of your app.
	* `ROUTE-HOSTNAME` is the subdomain of the domain associated with a route. In the route myapp.<%= vars.app_domain %>, the hostname is "myapp".
  * `PORT` is the port the TCP route listens on (specified when the route was created)

1. Update each route's ports:

	```
  cf curl -X PATCH /v3/routes/ROUTE-GUID/destinations -d '{
  "destinations": [
      {
        "app": {
          "guid": "APP-GUID",
          "process": {
            "type": "PROCESS-TYPE"
          }
        },
        "port": PORT,
        "protocol": "PROTOCOL"
      }
    ]
  }'
	```
	Where:
	* `APP-GUID` is the GUID of your app.
	* `ROUTE-GUID` is a route GUID retrieved in the previous step.
	* `PORT` is a custom port on which your app is configured to listen.
  * `PROTOCOL` is either `http1` or `http2` (for HTTP routes) or `tcp` (for TCP routes)
  * `PROCESS-TYPE` is usually `web`. Must match the `type` given in the output of `cf app APP-NAME`.

<p class="note"><strong>Note</strong>: This API call will remove _all_ destinations for a given route and replace them with the destinations provided in the request</p>

## <a id="additional-resources"></a> Additional Resources

For additional resources related to configuring custom app ports:

* For more information about making requests to the Cloud Controller API's `apps` endpoints, see [Updating an App](https://v3-apidocs.cloudfoundry.org/index.html#apps).

* For more information about making requests to the Cloud Controller API's `routes` endpoints, see [Mapping an App and a Route](https://v3-apidocs.cloudfoundry.org/index.html#routes).
