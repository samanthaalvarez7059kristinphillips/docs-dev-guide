---
title: Running cf push sub-step commands
owner: CAPI
---


The Cloud Foundry Command Line Interface (cf CLI) includes commands that provide detailed control over app pushes. When you use these commands, you can follow only some steps of the `cf push` procedure or you can perform specific actions between the steps that are normally part of running `cf push`.

Here are some example use cases for the sub-step commands:

* Updating a third-party system before staging an app
* Retrying failed stagings without incurring downtime
* Calling external services to report audit data during push
* Scanning a droplet before deploy
* Integrating with a change request system

To support these custom push workflows, Cloud Foundry divides apps into smaller building blocks.

The following table describes the building blocks as resources and lists the command associated with each one.

For information about using these commands, see [Example workflows](#example-workflows).

<table>
    <thead><tr>
        <th>Resource</th>
        <th>Description</th>
        <th style="width: 30%">Command</th>
    </tr></thead>
    <tr>
        <td>App</td>
        <td>The top-level resource that represents an app and its configuration.<br>
        For more information, see <a href="https://v3-apidocs.cloudfoundry.org/index.html#apps">Apps</a> in the CAPI documentation.</td>
        <td>
            <ul>
                <li><code>cf create-app</code></li>
            </ul>
        </td>
    </tr>
    <tr>
        <td>Package</td>
        <td>The source code that makes up an app.<br>
        For more information, see <a href="https://v3-apidocs.cloudfoundry.org/index.html#packages">Packages</a> in the CAPI documentation.</td>
        <td>
            <ul>
                <li><code>cf create-package</code></li>
            </ul>
        </td>
    </tr>
    <tr>
        <td>Build</td>
        <td>Staging the app. Creating a build combines a Package with a Buildpack and builds it into an executable resource.<br>
        For more information, see <a href="https://v3-apidocs.cloudfoundry.org/index.html#builds">Builds</a> in the CAPI documentation.</td>
        <td>
            <ul>
                <li><code>cf stage-package</code></li>
            </ul>
        </td>
    </tr>
    <tr>
        <td>Droplet</td>
        <td>An executable resource that results from a Build.<br>
        For more information, see <a href="https://v3-apidocs.cloudfoundry.org/index.html#droplets">Droplet</a> in the CAPI documentation.</td>
        <td>
            <ul>
                <li><code>cf set-droplet</code></li>
            </ul>
        </td>
    </tr>
    <tr>
        <td>Manifest</td>
        <td>A file used when pushing your app to apply bulk configuration to an app and its underlying processes.<br>
        For more information, see <a href="https://v3-apidocs.cloudfoundry.org/index.html#space-manifest"> Space Manifest</a> in the CAPI documentation.</td>
        <td>
            <ul>
                <li><code>cf create-app-manifest</code>, <code>cf apply-manifest</code></li>
            </ul>
        </td>
    </tr>
</table>


## <a id="example-workflows"></a> Example workflows

The following sections describe example workflows for working with the `cf push` sub-step commands.

### <a id="update-system"></a> Push an app using sub-step commands

This example workflow describes how to push an app using sub-step commands instead of `cf push`.

1. Create your app with cf CLI:

    ```
    cf create-app APP-NAME
    ```
    Where `APP-NAME` is the name you give your app.

1. From your app directory, create a package for your app.

    ```
    cf create-package APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

1. Locate and copy the `package guid` from the output of an earlier step. See the following example output:

    <pre class="terminal">
    Uploading and creating bits package for app APP-NAME in org test / space test as admin...
     package guid: 0dfca85a-8ed4-4f00-90d0-3ab08852dba8
     OK
    </pre>

1. Stage the package you created:

    ```
    cf stage-package APP-NAME --package-guid PACKAGE-GUID
    ```
    Where:
    <ul>
        <li><code>APP-NAME</code> is the name of your app.</li>
        <li><code>PACKAGE-GUID</code> is the package GUID you recorded in an earlier step.</li>
    </ul>

3. Locate and copy the `droplet guid` from the output of an earlier step. See the following example output:

    <pre class="terminal">
    Staging package for APP-NAME in org test / space test as admin...
    ...
    Package staged
     droplet guid: f60d3464-415a-4202-9d40-26a70373a487
     state: staged
     created: Mon 25 Sep 16:37:45 PDT 2018
    </pre>

4. Assign the droplet to your app:

    ```
    cf set-droplet APP-NAME -d DROPLET-GUID
    ```
    Where:
    <ul>
        <li><code>APP-NAME</code> is the name of your app.</li>
        <li><code>DROPLET-GUID</code> is the droplet GUID you recorded in an earlier step.</li>
    </ul>

5. Start your app:

    ```
    cf start APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

### <a id="update-system-example"></a> Roll back to a previous droplet

This example workflow describes how to roll back to a previous droplet used by your app. You might want to use this, for example, if you update your app and it has a bug that causes it to fail.

1. List the droplets for your app:

    ```
    cf droplets APP-NAME
    ```
    Where `APP-NAME` is the name of your app.

1. In the output, locate and copy the second-to-last GUID.

    In the following example, this is `66524145-5502-40e6-b782-47fe68e13c49`.

    <pre class="terminal">
    Listing droplets of app APP-NAME in org test / space test as admin...

    guid state created
        66524145-5502-40e6-b782-47fe68e13c49 staged Mon 25 Sep 16:37:34 PDT 2018
        0677ad93-9f77-4aaa-9a6b-44da022dcd58 staged Mon 25 Sep 16:44:55 PDT 2018
    </pre>

1. Stop your app:

    ```
    cf stop APP-NAME
    ```

1. Set the app to use the previous droplet:

    ```
    cf set-droplet APP-NAME -d PREVIOUS-DROPLET-GUID
    ```
    Where:
    <ul>
    <li><code>APP-NAME</code> is the name of your app.</li>
    <li><code>PREVIOUS-DROPLET-GUID</code> is the droplet GUID you recorded in an earlier step.</li>
    </ul>

1. Start your app:

    ```
    cf start APP-NAME
    ```
    Where `APP-NAME` is the name of your app.
