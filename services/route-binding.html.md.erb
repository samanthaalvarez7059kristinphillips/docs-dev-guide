---
title: Manage Application Requests with Route Services
---

<strong><%= modified_date %></strong>

_This page assumes you are using cf CLI v6 or greater._

This topic describes how to bind a service instance to a route for the purpose of adding preprocessing to application requests.

Route services are a class of [marketplace services](../services/managing-services.html) that perform filtering or content transformation on application requests and responses. This helps to remove the burden on developers who would otherwise have to implement these functions themselves. Popular use cases for route services include rate limiting, authorization, and caching. A route service may reject requests or after some transformation pass the request on to applications.

Developers wishing to leverage route services should first create a service instance, choosing from compatible marketplace services (see [Managing Services](../services/managing-services.html) or using [User-provided Service Instances](./user-provided.html). This service instance is then bound to a route; all requests for the route will then be preprocessed by the service instance. Note that some services may support instances being bound to both routes and apps, however these operations have different effects. For application requests and responses to be routed through a route service, the service instance must be bound to the route.

Binding a route to a service instance can be accomplished using the following cf CLI command:

<pre class="terminal">
$ cf bind-route-service <%=vars.app_domain%> my-route-service --hostname my-app

Binding may cause requests for route my-app.<%=vars.app_domain%> to be altered by service instance my-route-service. Do you want to proceed?> yes

Binding route my-app.<%=vars.app_domain%> to service instance my-route-service in org my-org / space my-space as developer...

OK
</pre>

<p class="note">
<strong>Note</strong>: When binding a service instance to a route, Cloud Foundry may proxy requests for the route to the service instance, or configure a network component already in the request path.
</p>
