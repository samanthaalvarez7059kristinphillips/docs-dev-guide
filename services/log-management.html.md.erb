---
title: Third-Party Log Management Services
---

_This page assumes that you are using cf v6._

Logs tell you both what your app does and what the system does with your app.
For any one application, logs come from each instance of the app and also from Cloud Foundry system components.
For example, when a Cloud Foundry Router routes an HTTP request to an app, the Router records that event in a log.

Cloud Foundry is configured to keep a limited amount of logging information in memory.
When you want to persist more log information than this, you can drain logs to a third-party log management service.
You can then use the third-party service to analyze the logs.
For example, you could produce metrics for application response times or error rates.

Providers whose log management products or services work with Cloud Foundry include Logentries, logstash, Papertrail, and Splunk. You will need to [setup an appropriate connection with these services for use with Cloud Foundry](log-management-thirdparty-svc.html).

You can think of the relationship between Cloud Foundry and the third-party logging service in terms of source, sink, and drain:

* The application and the system components that interact with the app are an information **source**.
* The logging service is an information **sink**.
* A **drain** configured on the application helps the source communicate with the sink.

## <a id='loggregator'></a>Loggregator ##

The Loggregator component of Cloud Foundry consolidates the logs of all actions that directly affect the app.
Loggregator keeps a limited amount of logging information in memory.
Eventually the newest logging information replaces the oldest.
If forced to restart, Loggregator retains no logging information from before the restart.

When sending logs to third-party services, Loggregator formats the data according to the *Syslog Protocol* defined in [RFC 5424](http://tools.ietf.org/html/rfc5424).
Third-Party Log Management Software is defined in [RFC 6587](http://tools.ietf.org/html/rfc6587).

In the Command Line Interface (CLI), you can view the entire Loggregator output or filter it to select a subset of logging information.
Logs viewed in the CLI are not in syslog format.

## <a id='use'></a>Draining Logs to a Third-Party Log Management Service ##

To drain logs from your application and relevant Cloud Foundry components to a third-party log management service, complete this procedure:

1. Observe the logs for your application.

1. Configure the log management service to treat your application as a source of data.

1. Create a user-provided service instance with a syslog drain.

1. Bind the service instance to the application.

1. Verify that logs are draining correctly.

Details about each of these steps follow.

### <a id='cli'></a>Observing the logs for your application ###

It's a good idea to become familiar with the log messages your application and relevant system components generate.
[Use the CLI](../deploy-apps/streaming-logs.html#view) to explore what kinds of messages are generated by various application behaviors.
Then you are better prepared to understand what you see in a third-party log management service.
See [Viewing Logs in the Command Line Interface](../deploy-apps/streaming-logs.html#view).

### <a id='config'></a>Configuring the log management service to treat your application as a source of data ###

Typically, you must configure a third-party log management service to accept traffic from your Cloud Foundry.
Depending on the service provider, you may need the following information:

* The external IP addresses of the two NAT boxes from which Cloud Foundry will send log traffic to the service.
Ask your Cloud Foundry administrator for these IP addresses.
(NAT boxes are systems responsible for Network Address Translation, not to be confused with the NATS messaging protocol.)

* The syslog URL, a special URL that the service typically makes available as an endpoint for incoming log data.
Cloud Foundry uses the syslog URL to route messages to the service.
The syslog URL has a scheme of `syslog` or `syslog-tls` and includes a port number.
For example:

 `syslog://logs.example.com:1234`

TLS support is described in [RFC 5425](http://tools.ietf.org/html/rfc5425).

### <a id='create'></a>Creating a user-provided service instance with a syslog drain ###

Create a user-provided service instance using the `cups` command with the `-l` option and the syslog URL you obtained earlier.
The `-l` option configures the syslog drain.
See [User-Provided Services] (./user-provided.html#user-cups).

### <a id='bind'></a>Binding the service instance to the application ###

You have two options:

* Use `cf push` with a manifest. The services block in the manifest must specify the service instance that you want to bind.
* Use `cf bind-service` followed by `cf push`.

See [Binding User-Provided Service Instances to Applications](user-provided.html#cups-example).

### <a id='verify'></a>Verifying that Logs are Draining Correctly ###

To verify that logs are draining correctly to a third-party log management service:

1. Take actions that you believe should produce log messages.

1. Compare the logs you see in the CLI against those that the service shows you.

For example, assuming that your application serves web pages, you can send HTTP requests to the application.
In Cloud Foundry, these generate Router log messages, which you can view in the CLI.
The third-party logging service should show you corresponding messages, although probably in a different format.

**Note**: For security reasons, Cloud Foundry applications do not respond to ping, so you cannot use ping to generate log entries.
