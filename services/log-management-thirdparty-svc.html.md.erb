---
title: Service-Specific Instructions for Streaming App Logs
owner: PCF Metrics
---



This topic provides instructions for configuring some third-party log management
services.

Once you have configured a service, refer to the [Third-Party Log Management Services](./log-management.html) topic for instructions on binding your app to the service.

## <a id='logit'></a>Logit.io ##

From your Logit.io dashboard:

1. Identify the Logit ELK stack you want to use.

1. Click Logstash **Configuration**.

1. Note your Logstash **Endpoint**.

1. Note your TCP-SSL, TCP, or UDP **Port** (not the syslog port).

1. Create the log drain service in Cloud Foundry.

    <pre class='terminal'>
    $ cf cups logit-ssl-drain -l syslog-tls://ENDPOINT:PORT
    </pre>
    or
    <pre class='terminal'>
    $ cf cups logit-drain -l syslog://ENDPOINT:PORT
    </pre>

1. Bind the service to an app.

    <pre class='terminal'>
    $ cf bind-service YOUR-CF-APP-NAME logit-ssl-drain
    </pre>
    or
    <pre class='terminal'>
    $ cf bind-service YOUR-CF-APP-NAME logit-drain
    </pre>

1. Restage or push the app using one of the following commands:

    <pre class='terminal'>$ cf restage YOUR-CF-APP-NAME</pre>

    <pre class='terminal'>$ cf push YOUR-CF-APP-NAME</pre>

    After a short delay, logs begin to appear in Kibana.

## <a id='papertrail'></a>Papertrail ##

From your Papertrail account:

1. Click **Add System**. The Dashboard appears.

1. Click the **Other** link. The **Setup Systems** screen appears.

1. Select **I use Cloud Foundry**, enter a name, and click **Save**.

    <%= image_tag("../images/third-party-logs/papertrail-04.png", :alt => "" ) %>

1. After the system is recorded, the URL, with the port, is displayed. Record the URL and port for later use..

    <%= image_tag("../images/third-party-logs/papertrail-05.png", :alt => "" ) %>

1. Create the log drain service in Cloud Foundry.

    <pre class='terminal'>
    $ cf cups my-logs -l syslog-tls://logs.papertrailapp.com:PORT
    </pre>

1. Bind the service to an app.

    <pre class='terminal'>
    $ cf bind-service APPLICATION-NAME my-logs
    </pre>

1. Restage the app.

    <pre class='terminal'>
    $ cf restage APPLICATION-NAME
    </pre>

    After a short delay, logs begin to flow automatically.

1. When Papertrail starts receiving log entries, the view automatically changes to show the logs viewing page.

    <%= image_tag("../images/third-party-logs/papertrail-11.png", :alt => "" ) %>

## <a id='splunk'></a>Splunk ##

See [Streaming App Logs to Splunk](integrate-splunk.html) for details.

## <a id='splunkstorm'></a>Splunk Storm ##

From your Splunk Storm account:

1. Click **Add project**. On the dialog box that appears, enter the **Project name** and select the **Project time zone**. Click **Continue**.

    <%= image_tag("../images/third-party-logs/splunkstorm-03.png", :alt => "" ) %>

2. In **Network data**, create a new input. Under **Network data**, click **Select**. Data is sent directly from your servers, and accepted data types include syslog, syslog-ng, snare, and netcat.

    <%= image_tag("../images/third-party-logs/splunkstorm-04.png", :alt => "" ) %>

3. Under **Add network data**, click **Authorize your IP address** and select **Manually**. Next, enter the external IP addresses your Cloud Foundry administrator assigns to outbound traffic.

    <%= image_tag("../images/third-party-logs/splunkstorm-05.png", :alt => "" ) %>

4. Record the host and port provided for TCP input for later use.

    <%= image_tag("../images/third-party-logs/splunkstorm-06.png", :alt => "The Authorized network inputs pane shows the ports the data will be sent to for this project only." ) %>

5. Using the cf CLI, create the log drain service in Cloud Foundry using the TCP host and port you recorded. Then you will bind the service to an app and restage the app using the syntax shown here. After a short delay, the logs will begin to flow.

    <pre class='terminal'>
    $ cf cups my-logs -l syslog://HOST:PORT
    $ cf bind-service APPLICATION-NAME my-logs
    $ cf restage APPLICATION-NAME
    </pre>

6. When events begin to appear, click **Data Summary**. The **Data Summary** button appears in the **What to Search** section.

    <%= image_tag("../images/third-party-logs/splunkstorm-09.png", :alt => "" ) %>

7. In the **Data Summary** table, click the **loggregator** link to view all incoming log entries from Cloud Foundry.

    <%= image_tag("../images/third-party-logs/splunkstorm-10.png", :alt => "" ) %>

## <a id='sumologic'></a>SumoLogic ##

<p class="note"><strong>Note</strong>: SumoLogic uses HTTPS for communication.  HTTPS is supported in Cloud Foundry v158 and later.</p>

In your SumoLogic account:

1. Beside **Manage Collectors and Sources**, click the **Add Collector** link.

    <%= image_tag("../images/third-party-logs/sumologic-02.png", :alt => "" ) %>

1. Under **Add Collector**, select **Hosted Collector** and fill in the details.
  1. In **Name**, enter 'Cloud Foundry'.
  2. In **Description**, enter the purpose of the new collector.
  3. In **Category**, you can enter the source category, if desired. The collector will set the source category to this value unless it is overwritten by the source metadata.

    <%= image_tag("../images/third-party-logs/sumologic-03a.png", :alt => "" ) %>

    <%= image_tag("../images/third-party-logs/sumologic-03b.png", :alt => "" ) %>

2. In the **Manage Collectors and Sources** table, in the row for the new collector, click the **Add Source** link.

    <%= image_tag("../images/third-party-logs/sumologic-04.png", :alt => "" ) %>

3. Under **Select a type of Source**, select **HTTP** and fill in the details. An HTTPS URL will be provided.
  1. In **Name**, leave the entry, 'CloudFoundry'.
  2. In **Description**, enter a description of the source.
  3. In **Source Host**, enter the host name for the system from which the log files are being collected.
  4. In **Source Category**, enter the log category metadata. You can use this later in queries.

    <%= image_tag("../images/third-party-logs/sumologic-05.png", :alt => "" ) %>

4. When the source has been created, a URL will be displayed. You can also view the URL by clicking the **Show URL** link beside the newly created source in the **Manage Collectors and Sources** table. Record the URL for the next step.

    <%= image_tag("../images/third-party-logs/sumologic-06a.png", :alt => "" ) %>

5. Using the cf CLI, create the log drain service in Cloud Foundry using the source URL you just recorded. Then you will bind the service to an app and restage the app using the syntax shown here. After a short delay, the logs will begin to flow.

    <pre class='terminal'>
    $ cf cups my-logs -l HTTPS-SOURCE-URL
    $ cf bind-service APPLICATION-NAME my-logs
    $ cf restage APPLICATION-NAME
    </pre>

6. In the SumoLogic dashboard, click **Manage**, then click **Status** to see a view of the log messages received.

    <%= image_tag("../images/third-party-logs/sumologic-09.png", :alt => "" ) %>

1. Click **Search**. Place the cursor in the search box, then press **Enter** to submit an empty search query.

    <%= image_tag("../images/third-party-logs/sumologic-10.png", :alt => "" ) %>

## <a id='logsene'></a>Logsene ##

<p class="note"><strong>Note</strong>: Logsene uses HTTPS for communication. HTTPS is supported in Cloud Foundry v158 and later.</p>

In your Sematext account:

1. Click the [Create App / Logsene App](https://apps.sematext.com/logsene-reports/registerApplication.do) menu item. Enter a name and click **Add Application** to create the Logsene App.

2. Using the cf CLI, create the log drain service using the source URL displayed. Then you will bind the service to an app and restage the app using the syntax shown here. After a short delay, the logs will begin to flow. The logs will appear in the [Logsene UI](https://apps.sematext.com/users-web/services.do#logsene).

    <pre class='terminal'>
    $ cf cups logsene-log-drain -l https://logsene-cf-receiver.sematext.com/YOUR_LOGSENE_TOKEN
    $ cf bind-service YOUR-CF-APP-NAME logsene-log-drain
    $ cf restage APPLICATION-NAME
    </pre>

## <a id='logentries'></a>Logentries is Not Supported ##

Using Logentries is not recommended because it does not support multiple syslog sources. Cloud Foundry distributes log messages over multiple servers to handle the load.
