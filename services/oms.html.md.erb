---
title: Streaming Application Logs to Azure OMS Log Analytics
owner: Logging and Metrics
---

<p class="note warning">
<strong>WARNING: </strong>
The OMS Log Analytics Firehose Nozzle is currently intended for evaluation and test purposes only. Do not use this product in a production environment.
</p>

<strong><%= modified_date %></strong>

This topic explains how to integrate your Cloud Foundry (CF) apps with [OMS Log Analytics](https://docs.microsoft.com/en-us/azure/log-analytics/).

Operations Management Suite (OMS) Log Analytics is a monitoring service for Microsoft Azure.
The OMS Log Analytics Firehose Nozzle is a CF component that forwards metrics from the Loggregator Firehose to OMS Log Analytics.

This topic assumes you have a working <%= vars.product_full %> deployment on Azure.
<%= vars.azure_deploy %>

## <a id='config'></a>Step 1: Create an OMS Workspace in Azure

See [Get started with Log Analytics](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-get-started) to create an OMS workspace.

## <a id='deploy'></a>Step 2: Deploy the Nozzle to Cloud Foundry

1. Use `cf login -a https://api.YOUR-DOMAIN -u YOUR-USERNAME --skip-ssl-validation` to
authenticate to your CF instance:
    <pre class="terminal">$ cf login -a https<span>:</span>//api.example.com -u admin --skip-ssl-validation</pre>

1. Create a new Cloud Foundry user and grant it access to the Loggregator Firehose
using the UAA CLI (UAAC). See
[Creating and Managing Users with the UAA CLI](../../adminguide/uaa-user-management.html) for more information.

    1. Use `uaac target uaa.YOUR-DOMAIN` to target your UAA server:
      <pre class="terminal">$ uaac target uaa.example.com --skip-ssl-validation</pre>
    1. Run the following command to obtain an access token for the admin client:
      <pre class="terminal">$ uaac token client get admin</pre>
    1. Create a new user with `cf create-user USERNAME PASSWORD`:
      <pre class="terminal">$ cf create-user firehose-user firehose-password</pre>
    1. Grant the new user admin permissions with `uaac member add cloud_controller.admin USERNAME`:
      <pre class="terminal">$ uaac member add cloud_controller.admin firehose-user</pre>
    1. Grant the new user permission to read logs from the Loggregator Firehose endpoint
    with `uaac member add doppler.firehose USERNAME`:
      <pre class="terminal">$ uaac member add doppler.firehose firehose-user</pre>

1. Download the OMS Log Analytics Firehose Nozzle BOSH release from [Github](https://github.com/Azure/oms-log-analytics-firehose-nozzle).

    1. Clone the OMS Log Analytics Firehose Nozzle repository:
       <pre class="terminal">
       $ git clone https<span>:</span>//github.com/Azure/oms-log-analytics-firehose-nozzle.git
       </pre>
    1. Navigate to the `oms-log-analytics-firehose-nozzle` directory:
       <pre class="terminal">
       $ cd oms-log-analytics-firehose-nozzle
       </pre>

1.  Set the following environment variables in the [OMS Log Analytics Firehose Nozzle manifest](https://github.com/Azure/oms-log-analytics-firehose-nozzle/blob/master/manifest.yml):

    <table>
      <tr>
        <th>Environment Variable</th>
        <th>Description</th>
      </tr><tr>
        <td><pre>
        applications:
        - name: oms_nozzle
        ...
        env:
          OMS_WORKSPACE: YOUR-WORKSPACE-ID
          OMS_KEY: YOUR-OMS-KEY</pre></td>
        <td>Enter the ID and key value for your OMS workspace.</td>
      </tr><tr>
        <td><pre>
        OMS_POST_TIMEOUT: 10s</pre></td>
        <td>(Optional) Set the HTTP post timeout for sending events to OMS Log
        Analytics. The default value is 10 seconds.</td>
      </tr><tr>
        <td><pre>
        OMS_BATCH_TIME: 10s</pre></td>
        <td>(Optional) Set the interval for posting a batch to OMS. The default
        value is 10 seconds.</td>
      </tr><tr>
        <td><pre>
        OMS_MAX_MSG_NUM_PER_BATCH: 1000</pre></td>
        <td>(Optional) Set the maximum number of messages to include in an OMS
        batch. The default amount is 1000.</td>
      </tr><tr>
        <td><pre>
        FIREHOSE_USER: YOUR-FIREHOSE-USER
        FIREHOSE_USER_PASSWORD: YOUR-FIREHOSE-PASSWORD</pre></td>
        <td>Enter the username and password for the Firehose user you created
        in Step 2c.</td>
      </tr><tr>
        <td><pre>
        API_ADDR: https://api.YOUR-DOMAIN</pre></td>
        <td>Enter the URL of your API endpoint.</td>
      </tr><tr>
        <td><pre>
        DOPPLER_ADDR: wss://doppler.YOUR-DOMAIN:443</pre></td>
        <td>Enter the URL of your deployment for Loggregator's traffic controller URL.</td>
      </tr><tr>
        <td><pre>
        EVENT_FILTER: YOUR-LIST</pre></td>
        <td>(Optional) Enter the event types you want to filter out in a comma-separated list.
        The valid event types are <code>METRIC</code>, <code>LOG</code>, and <code>HTTP</code>.</td>
      </tr><tr>
        <td><pre>
        IDLE_TIMEOUT: 60s</pre></td>
        <td>(Optional) Set the duration for the Firehose keepalive connection.
        The default time is 60 seconds.</td>
      </tr><tr>
        <td><pre>
        SKIP_SSL_VALIDATION: TRUE-OR-FALSE</pre></td>
        <td>Set this value to <code>true</code> to allow insecure connections to the UAA and the traffic controller. To block insecure connections to the UAA and traffic controller,
        set this value to <code>false</code>.</td>
      </tr><tr>
        <td><pre>
        LOG_LEVEL: INFO</pre></td>
        <td>(Optional) Change this value to increase or decrease the amount of
        logs. Valid log levels in increasing order include <code>INFO</code>,
        <code>ERROR</code>, and <code>DEBUG</code>. The default value is <code>INFO</code>.</td>
      </tr><tr>
        <td><pre>
        LOG_EVENT_COUNT: TRUE-OR-FALSE</pre></td>
        <td>Set this value to <code>true</code> to log the total count of events
        that the nozzle has sent and received. OMS logs this value as CounterEvents.</td>
      </tr><tr>
        <td><pre>
        LOG_EVENT_COUNT_INTERVAL: 60s</pre></td>
        <td>(Optional) Set the time interval for logging the event count to OMS.
        The default interval is 60 seconds.</td>
      </tr>
    </table>

1. Push the app.

    <pre class="terminal">
    $ cf push
    </pre>

## <a id='oms-portal'></a> Step 3: View Logs in OMS Portal

<p class="note"><strong>Note</strong>: The OMS view of Cloud Foundry is not yet available in the OMS Solutions Gallery. You can add it manually to view your logs in OMS Portal.</p>

1. From the main OMS Overview page, navigate to **View Designer**.
1. Click **Import**.
1. Click **Browse**.
1. Select the `Cloud Foundry (Preview).omsview` file.
1. Save the view. The main OMS Overview page displays the **Tile**.
1. Click the **Tile** to view visualized metrics.

See the [Log Analytics View Designer documentation](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-view-designer) for more information.


### <a id='alert'></a> Create Alert Rules
Operators can follow [this page](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-alerts) to create Alert rules in OMS Portal.

### <a id='queries'></a> Sample Alert Queries

1. slowConsumerAlert
```
Type=CF_ValueMetric_CL Name_s=slowConsumerAlert
```

2. Loggregator emits **LGR** to indicate problems with the logging process, e.g. when log message output is too high
```
Type=CF_LogMessage_CL SourceType_s=LGR MessageType_s=ERR
```

3. When the number of lost events reaches a threshold (set the threshold value in OMS Portal)
```
Type=CF_CounterEvent_CL Job_s=nozzle Name_s=eventsLost
```

4. When the nozzle receives `TruncatingBuffer.DroppedMessages` CounterEvent
```
Type=CF_CounterEvent_CL Name_s="TruncatingBuffer.DroppedMessages"
```

### <a id='test'></a> Test
You need [ginkgo](https://github.com/onsi/ginkgo) to run the test. Run the following command to execute test:
```
ginkgo -r
```

## <a id='oms-api'></a> Use the OMS Client API

This is a sample of using the OMS API for log ingestion.

<p class="note warning">
<strong>WARNING: </strong>
The OMS Client API is in beta and is intended for evaluation and test purposes only. Do not use this product in a production environment.
</p>


The required parameters to construct a client are:

* Workspace ID
* Workspace key

You can get the workspace id and key from the OMS portal.


## <a id='additional-logging'></a> (Optional) Step 4: Configure Additional Logging

For the most part, the oms-log-analytics-firehose-nozzle forwards metrics from the loggregator firehose to OMS without too much processing. In a few cases the nozzle might push some additional metrics to OMS.

### eventsReceived, eventsSent and eventsLost
If `LOG_EVENT_COUNT` is set to true, the nozzle will periodically send to OMS the count of received events, sent events and lost events, at intervals of `LOG_EVENT_COUNT_INTERVAL`.

The statistic count is sent as a CounterEvent, with CounterKey of one of **`nozzle.stats.eventsReceived`**, **`nozzle.stats.eventsSent`** and **`nozzle.stats.eventsLost`**. Each CounterEvent contains the value of delta count during the interval, and the total count from the beginning. **`eventsReceived`** counts all the events that the nozzle received from firehose, **`eventsSent`** counts all the events that the nozzle sent to OMS successfully, **`eventsLost`** counts all the events that the nozzle tried to send to OMS but failed after 4 attempts.

These CounterEvents themselves are not counted in the received, sent or lost count.

In normal cases, the total count of eventsSent plus eventsLost is less than total eventsReceived at the same time, as the nozzle buffers some messages and then post them in a batch to OMS. Operator can adjust the buffer size by changing the configurations `OMS_BATCH_TIME` and `OMS_MAX_MSG_NUM_PER_BATCH`.

### slowConsumerAlert
When the nozzle receives slow consumer alert from loggregator in two ways:

1. the nozzle receives a WebSocket close error with error code `ClosePolicyViolation (1008)`

2. the nozzle receives a CounterEvent with the name `TruncatingBuffer.DroppedMessages`

the nozzle will send a slowConsumerAlert as a ValueMetric to OMS, with MetricKey **`nozzle.alert.slowConsumerAlert`** and value **`1`**.

This ValueMetric is not counted in the above statistic received, sent or lost count.

## <a id='scaling'></a> (Optional) Step 5: Scale 

### Scaling Nozzle
Operators should run at least two instances of the nozzle to reduce message loss. The Firehose will evenly distribute events across all instances of the nozzle.

When the nozzle couldn't keep up with processing the logs from firehose, Loggregator alerts the nozzle and then the nozzle logs slowConsumerAlert message to OMS. Operator can [create Alert rule](#alert) for this slowConsumerAlert message in OMS Log Analytics, and when the alert is triggered, the operator should scale up the nozzle to minimize the loss of data.

We did some workload test against the nozzle and got a few data for operaters' reference:
* In our test, the size of each log and metric sent to OMS is around 550 bytes, suggest each nozzle instance should handle no more than **300000** such messages per minute. Under such workload, the CPU usage of each instance is around 40%, and the memory usage of each instance is around 80M.


### Scaling Loggregator
Loggregator emits **LGR** log message to indicate problems with the logging process. When operaters see this message in OMS, they might need to [scale Loggregator](https://docs.cloudfoundry.org/running/managing-cf/logging-config.html#scaling).

