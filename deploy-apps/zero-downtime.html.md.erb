---
title: Deploying Apps with Zero Downtime (Experimental)
owner: CAPI
---

This topic describes how developers use experimental Cloud Foundry Command Line Interface (cf CLI) commands to push updates to their apps without incurring downtime. 

For information about the traditional method for addressing app downtime during deployment, see [Using Blue-Green Deployment to Reduce Downtime and Risk](./blue-green.html).   

## <a id="prerequisites"></a>  Prerequisites

The procedures in this topic require the following: 

* You must have cf CLI v6.40 or later. 
* The zero-downtime app deployment feature must be enabled for your installation.
	* <%= vars.zdt_enable %>

## <a id="commands"></a> Experimental Commands

This section describes the experimental commands for working with zero-downtime app deployments. 

### <a id="deploy"></a>  Deploy an App

To deploy an app without incurring downtime, run the following command:

<p class="note"><strong>Note</strong>: Ensure that you understand the <a href="#limitations">Limitations</a> of this feature before running the command.</p>

```
cf v3-zdt-push APP-NAME
``` 

For more information about this command, see [How it Works](#how-it-works). 

### <a id="cancel"></a>  Cancel a Deployment

To stop the deployment of an app that you pushed, run the following command:

<p class="note"><strong>Note</strong>: There is no guarantee of zero-downtime during a cancel. The goal is to revert the app to its original state as quickly as possible.</p>

```
cf v3-cancel-zdt-push APP-NAME
```

This reverts the app to its state from before the deployment started by doing the following:

* Scaling up the original web process
* Removing any deployment artifacts
* Resetting the `current_droplet` on the app

### <a id="restart"></a> Restart an App

To apply configuration updates without downtime, such as environment variables or service bindings, run the following command to restart your app: 

```
cf v3-cancel-zdt-restart APP-NAME
```

## <a id="how-it-works"></a> How It Works

This section compares the original `cf push` command with the experimental `cf v3-zdt-push` command. 

### <a id="deployment-process"></a> cf push Process

The original `cf push` does the following:

1. Uploads your new code.
1. Stops the old version of the app.
1. Starts the new version of the app.

### <a id="deployment-process"></a>  cf v3-zdt-push Process

This section describes the process of pushing an app with `cf v3-zdt-push`. 

1. The `cf v3-zdt-push` command does the following:
	1. Stages the updated app package
	1. Creates a droplet with the updated app package
	1. Creates a deployment with the new droplet and any new configuration. 
		* This starts a new process with one instance that shares the route with the old process. 
		* At this point, if you run `cf app` on your app, you see a `web` process and a `web-deployment-DEPLOYMENT-UUID` process.
		* For more information about the deployment object, see the [Deployments](http://v3-apidocs.cloudfoundry.org/index.html#deployments) section of the CAPI v3 docs. 
1. Once the command creates the deployment, the `cc_deployment_updater` BOSH job runs in the background, updating deployments as follows:
	1. Adds another instance of the new web process and removes an instance from the old web process. 
		<p class="note"><strong>Note</strong>: This only happens if all instances of the new deployment web process are currently running.</p>
	1. Repeats the above step until the new web process reaches the desired number of instances. 
	1. Removes the old web process. The new web process now fully replaces the old web process.
	1. Restarts all non-web processes of the app. 
	1. Sets the deployment to `DEPLOYED`. 

### <a id="limitations"></a>  Limitations

The following table describes the limitations to consider when using the experimental `v3-zdt-push` command. 

<table>
	<tr>
		<th>Limitation</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Multiple app versions</td>
		<td>During a deployment, Cloud Foundry serves both the old and new version of your app at the same route. This could lead to user issues if you push backwards-incompatible API changes.</td>
	</tr>
	<tr>
		<td>Database migrations</td>
		<td>Deployments do not handle database migrations. If you are migrating an app database and the old app is not compatible with the migration, you may still have downtime. 
		</td>
	</tr>
	<tr>
		<td>Non-web processes</td>
		<td>Zero-downtime deployments are only for web processes. Non-web processes, such as worker processes, restart in bulk after the web processes have updated.<br><br>
		The CAPI v3 API introduces the concept of processes as runnable units of an app. Each app has a web process by default. You can specify additional processes with a procfile, and in some cases buildpacks create additional processes. For more information about processes, see the <a href="http://v3-apidocs.cloudfoundry.org/index.html#processes">Processes</a> section of the CAPI v3 documentation. 
		</td>
	</tr>
	<tr>
		<td>Quotas</td>
		<td>A deployment creates an extra instance of your app. If there is not enough quota available, the deployment does not work. Administrators may need to increase quotas to account for zero-downtime deployments.</td>
	</tr>
	<tr>
		<td>Simultaneous apps when interrupting a push</td>
		<td>If you run <code>v3-zdt-push</code> for an app before your previous <code>v3-zdt-push</code> command for the same app has completed, your first push gets interrupted. Until the last deployment completes, there may be many versions of the app running at once. Eventually, the app runs the code from your most recent push.</td>
	</tr>
</table>