---
title: Build Tool Integration
---

_This page assumes you are using cf v6 and version 1.0.1 of either the Cloud Foundry Maven plugin or the Cloud Foundry Gradle plugin._

## <a id='maven'></a>Maven Plugin ##
The Cloud Foundry Maven plugin allows you to deploy and manage applications with Maven goals. This plugin provides Maven users with access to the core functionality of the Cloud Foundry cf command-line tool.

### <a id='maven-basic'></a>Basic Configuration ###
To install the Cloud Foundry Maven plugin, add the `cf-maven-plugin` to the `<plugins>` section of the `pom.xml` file:

  ~~~
  <plugins>
      <plugin>
          <groupId>org.cloudfoundry</groupId>
          <artifactId>cf-maven-plugin</artifactId>
          <version>1.0.1</version>
      </plugin>
  </plugins>
  ~~~

This minimal configuration is sufficient to execute many of the Maven goals provided by the plugin, as long as you provide all other necessary configuration information through command-line parameters.

### <a id='maven-additional'></a>Additional Configuration ###
Instead of relying on command-line parameters, you can include additional configuration information in the `pom.xml` by nesting a `<configuration>` section within the cf-maven-plugin section.

Example:

  ~~~
  <plugins>
      <plugin>
          <groupId>org.cloudfoundry</groupId>
          <artifactId>cf-maven-plugin</artifactId>
          <version>1.0.1</version>
          <configuration>
              <target>http://api.run.pivotal.io</target>
              <org>mycloudfoundry-org</org>
              <space>development</space>
              <appname>my-app</appname>
              <url>my-app.<%=vars.app_domain%></url>
              <memory>512</memory>
              <instances>2</instances>
              <env>
                  <ENV-VAR-NAME>env-var-value</ENV-VAR-NAME>
              </env>
              <services>
                  <service>
                      <name>my-rabbitmq</name>
                      <label>rabbitmq</label>
                      <provider>rabbitmq</provider>
                      <version>n/a</version>
                      <plan>small_plan</plan>
                  </service>
              </services>
          </configuration>
      </plugin>
  </plugins>
  ~~~

After adding and configuring the plugin you can build and push the application to Cloud Foundry with the following command:

<pre class="terminal">
$ mvn clean package cf:push
</pre>

### <a id='maven-security'></a>Security Credentials ###
While you can include Cloud Foundry security credentials in the `pom.xml` file, a more secure method is to store the credentials in the Maven `settings.xml` file, using the server XML configuration element [(http://maven.apache.org/settings.html#Servers)](http://maven.apache.org/settings.html#Servers). The default location for this configuration file is `~/.m2/settings.xml`.

To implement this:

1. Add a server to the servers section of the `settings.xml` file. Include the Cloud Foundry security credentials (username and password) and an `ID` tag. The `pom.xml` references this ID to access the security credentials.

    ~~~
    <settings>
        . . .
        <servers>
            . . .
            <server>
                <id>cloud-foundry-credentials</id>
                <username>my-name@email.com</username>
                <password>s3cr3t</password>
            </server>
            . . .
        </servers>
        . . .
    </settings>
    ~~~

2. Add a server configuration element referencing the ID to the `pom.xml` file:

    ~~~
    <plugins>
        <plugin>
            <groupId>org.cloudfoundry</groupId>
            <artifactId>cf-maven-plugin</artifactId>
            <version>1.0.1</version>
            <configuration>
                <server>cloud-foundry-credentials</server>
                . . .
            </configuration>
        </plugin>
    </plugins>
    ~~~

### <a id='maven-command-line'></a>Command-Line Usage ###
Key functionality available with the Cloud Foundry Maven plugin:

<table border="1" class="table" >
<tr><th><strong>Maven Goal</strong></th><th><strong>Cloud Foundry Command</strong></th><th><strong>Syntax</strong></th></tr>
<tr><td>cf:login</td><td>login -u USERNAME</td><td>$ mvn cf:login</td>
<tr><td>cf:logout</td><td>logout</td><td>$ mvn cf:logout</td>
<tr><td>cf:app</td><td>app APPNAME</td><td>$ mvn cf:app [-Dcf.appname=APPNAME]</td>
<tr><td>cf:apps</td><td>apps</td><td>$ mvn cf:apps</td>
<tr><td>cf:target</td><td>api</td><td>$ mvn cf:target</td>
<tr><td>cf:push</td><td>push</td><td>$ mvn cf:push [-Dcf.appname=APPNAME] [-Dcf.path=PATH] [-Dcf.url=URL] [-Dcf.no-start=BOOLEAN]</td>
<tr><td>cf:start</td><td>start APPNAME</td><td>$ mvn cf:start [-Dcf.appname=APPNAME]</td>
<tr><td>cf:stop</td><td>stop APPNAME</td><td>$ mvn cf:stop [-Dcf.appname=APPNAME]</td>
<tr><td>cf:restart</td><td>restart APPNAME</td><td>$ mvn cf:stop [-Dcf.appname=APPNAME]</td>
<tr><td>cf:delete</td><td>delete APPNAME</td><td>$ mvn cf:delete [-Dcf.appname=APPNAME]</td>
<tr><td>cf:scale</td><td>scale APPNAME -i INSTANCES</td><td>$ mvn cf:scale [-Dcf.appname=APPNAME] [-Dcf.instances=INTEGER]</td>
<tr><td>cf:env</td><td>env APPNAME</td><td>$ mvn cf:env [-Dcf.appname=APPNAME]</td>
<tr><td>cf:services</td><td>services</td><td>$ mvn cf:services</td>
<tr><td>cf:create-services</td><td>create-service SERVICE PLAN SERVICE_INSTANCE</td><td>$ mvn cf:create-services</td>
<tr><td>cf:delete-services</td><td>delete-service SERVICE_INSTANCE</td><td>$ mvn cf:delete-service</td>
<tr><td>cf:bind-services</td><td>bind-service APPNAME SERVICE_INSTANCE</td><td>$ mvn cf:bind-services</td>
<tr><td>cf:unbind-services</td><td>unbind-service APPNAME SERVICE_INSTANCE</td><td>$ mvn cf:unbind-services</td>
</table>

## <a id='gradle'></a>Gradle Plugin ##
The Cloud Foundry Gradle plugin allows you to deploy and manage applications with Gradle tasks. This plugin provides Gradle users with access to the core functionality of the Cloud Found cf command-line tool.

### <a id='gradle-basic'></a>Basic Configuration ###
To install the Cloud Foundry Gradle plugin, add the `cf-gradle-plugin` as a dependency in the `buildscript` section of the `build.gradle` file:

  ~~~
  buildscript {
      repositories {
          mavenCentral()
      }
      dependencies {
          classpath 'org.cloudfoundry:cf-gradle-plugin:1.0.1'
          . . .
      }
  }

  apply plugin: 'cloudfoundry'
  ~~~

This minimal configuration is sufficient to execute many of the Gradle tasks provided by the plugin, as long as you provide all other necessary configuration information through command-line parameters

### <a id='gradle-additional'></a>Additional Configuration
Instead of relying on command-line parameters, you can add additional configuration information to `build.gradle` in a `cloudfoundry` configuration section:

  ~~~
  cloudfoundry {
      target = "https://api.run.pivotal.io"
      space = "deployment"
      file = file("path/to/my/file.war")
      uri = "my-app.<%=vars.app_domain%>"
      memory = 512
      instances = 1
      env = [ "key": "value ]
      serviceInfos {
          "my_rabbitmq" {
              label = "rabbitmq"
              provider = "rabbitmq"
              version = "n/a"
              plan = "small_plan"
              bind = true
          }
      }
  }
  ~~~

After adding and configuring the plugin you can build and push the application to Cloud Foundry with the following command:

<pre class="terminal">
$ gradle clean assemble cf-push
</pre>

### <a id='gradle-security'></a>Security Credentials ###
While you can include Cloud Foundry security credentials in the `build.gradle` file, a more secure method is to store the credentials in a `gradle.properties` file. This file can be placed in either the project directory or in the `~/.gradle` directory.

To implement this, add `cf.username` and `cf.password` with the Cloud Foundry security credentials parameters to the `gradle.properties` file as follows:

  ~~~
  cf.username=user@example.com
  cf.password=examplePassword
  ~~~

(Note there are no quotes around either the username or password.)

### <a id='gradle-command-line'></a>Command-Line Usage ###
Key functionality available with the Cloud Foundry Gradle plugin:

<table border="1" class="table" >
<tr><th><strong>Gradle Task</strong></th><th><strong>Cloud Foundry Command</strong></th><th><strong>Syntax</strong></th></tr>
<tr><td>cf-login</td><td>login -u USERNAME</td><td>$ gradle cf-login</td>
<tr><td>cf-logout</td><td>logout</td><td>$ gradle cf-logout</td>
<tr><td>cf-app</td><td>app APPNAME</td><td>$ gradle cf-app [-Pcf.application=APPNAME]</td>
<tr><td>cf-apps</td><td>apps</td><td>$ gradle cf-apps</td>
<tr><td>cf-target</td><td>api</td><td>$ gradle cf-target</td>
<tr><td>cf-push</td><td>push</td><td>$ gradle cf-push [-Pcf.application=APPNAME] [-Pcf.uri=URL] [-Pcf.startApp=BOOLEAN]</td>
<tr><td>cf-start</td><td>start APPNAME</td><td>$ gradle cf-start [-Pcf.application=APPNAME]</td>
<tr><td>cf-stop</td><td>stop APPNAME</td><td>$ gradle cf-stop [-Pcf.application=APPNAME]</td>
<tr><td>cf-restart</td><td>restart APPNAME</td><td>$ gradle cf-stop [-Pcf.application=APPNAME]</td>
<tr><td>cf-delete</td><td>delete APPNAME</td><td>$ gradle cf-delete [-Pcf.application=APPNAME]</td>
<tr><td>cf-scale</td><td>scale APPNAME -i INSTANCES</td><td>$ gradle cf-scale [-Pcf.application=APPNAME] [-Pcf.instances=INTEGER]</td>
<tr><td>cf-env</td><td>env APPNAME</td><td>$ gradle cf-env [-Pcf.application=APPNAME]</td>
<tr><td>cf-services</td><td>services</td><td>$ gradle cf-services</td>
<tr><td>cf-create-service</td><td>create-service SERVICE PLAN SERVICE_INSTANCE</td><td>$ gradle cf-create-services</td>
<tr><td>cf-delete-services</td><td>delete-service SERVICE_INSTANCE</td><td>$ gradle cf-delete-service</td>
<tr><td>cf-bind</td><td>bind-service APPNAME SERVICE_INSTANCE</td><td>$ gradle cf-bind-services</td>
<tr><td>cf-unbind</td><td>unbind-service APPNAME SERVICE_INSTANCE</td><td>$ gradle cf-unbind</td>
</table>