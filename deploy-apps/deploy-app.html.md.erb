---
title: Deploy an Application
owner: CAPI
---

<strong><%= modified_date %></strong>

<p class="note"><strong>Note:</strong> See the <a href="../../buildpacks/">buildpacks</a> documentation for complete deployment guides specific to your application language or framework, such as the <a href="../../buildpacks/ruby/gsg-ror.html">Getting Started Deploying Ruby on Rails Apps</a> guide.</p>

## <a id='intro'></a>Overview of Deployment Process ##

You deploy an application to Cloud Foundry by running a `push` command from a
Cloud Foundry command line interface (CLI).
Refer to the [Installing the cf Command Line Interface](../../cf-cli/install-go-cli.html) topic for more information.
Between the time that you run `push` and the time that the application is available, Cloud Foundry performs the following tasks:

* Uploads and stores application files
* Examines and stores application metadata
* Creates a "droplet" (the Cloud Foundry unit of execution) for the application
* Selects an appropriate droplet execution agent (DEA) to run the droplet
* Starts the application

For more information on the lifecycle of an app, see the <a href="app-lifecycle.html">Application Container Lifecycle</a> topic.

An application that uses services, such as a database, messaging, or email
server, is not fully functional until you provision the service and, if
required, bind the service to the application.
For more information about services, see the [Services Overview](../services/index.html) topic.

## <a id='prepare'></a>Step 1: Prepare to Deploy ##

Before you deploy your application to Cloud Foundry, make sure that:

* Your application is *cloud-ready*.
Cloud Foundry behaviors related to file storage, HTTP sessions, and port usage
may require modifications to your application.

* All required application resources are uploaded.
For example, you may need to include a database driver.

* Extraneous files and artifacts are excluded from upload.
You should explicitly exclude extraneous files that reside within your
application directory structure, particularly if your application is large.

* An instance of every service that your application needs has been created.

* Your Cloud Foundry instance supports the type of application you are going to
deploy, or you have the URL of an externally available buildpack that can stage
the application.

For help preparing to deploy your application, see:

* [Considerations for Designing and Running an Application in the Cloud](./prepare-to-deploy.html)
* [Buildpacks](../../buildpacks/index.html)


## <a id='logon-target'></a>Step 2: Know Your Credentials and Target ##

Before you can push your application to Cloud Foundry you need to know:

* The API endpoint for your Cloud Foundry instance. Also known as the target
URL, this is <%=vars.api_endpoint%>.
* Your username and password for your Cloud Foundry instance.
* The organization and space where you want to deploy your application.
A Cloud Foundry workspace is organized into organizations, and within them,
spaces.
As a Cloud Foundry user, you have access to one or more organizations and
spaces.

## <a id='domain'></a>Step 3: (Optional) Configure Domains ##

Cloud Foundry directs requests to an application using a route, which is a URL
made up of a host and a domain.

* The name of an application is the default host for that application, unless you specify the host name with the <code>-n</code> flag.

* Every application is deployed to an application space that belongs to a
domain.
Every Cloud Foundry instance has a default domain defined.
You can specify a non-default, or custom, domain when deploying, provided that
the domain is registered and is mapped to the organization which contains the target application space.

<p class='note'><strong>Note</strong>:
CF ​allows​ app names, but not app URLs, to include underscores. CF converts underscores to hyphens when setting a default app URL from an app name.
</p>

* The URL for your app must be unique from other apps hosted by <%=vars.product_short%>. Use the following options with the [cf CLI](../../cf-cli/index.html) to help create a unique URL:

   * `-n` to assign a different HOST name for the app
   * `--random-route` to create a URL that includes the app name and random words

 <p class='note'><strong>Note</strong>: Use <code>cf help push</code> to view other options for this command.</p>

<%=vars.ssl%>

For more information about domains, see [Routes and Domains](./routes-domains.html).

## <a id='options'></a>Step 4: Determine Deployment Options ##

Before you deploy, you need to decide on the following:

* **Name**: You can use any series of alpha-numeric characters, without spaces,
as the name of your application.
* **Instances**: Generally speaking, the more instances you run, the less
downtime your application will experience.
If your application is still in development, running a single instance can
simplify troubleshooting.
For any production application, we recommend a minimum of two instances.
* **Memory Limit**: The maximum amount of memory that each instance of your
application can consume.
If an instance exceeds this limit, Cloud Foundry restarts the instance.
    <p class='note'><strong>Note</strong>: Initially, Cloud Foundry immediately
    restarts any instances that exceed the memory limit. If an instance
    repeatedly exceeds the memory limit in a short period of time, Cloud Foundry
    delays restarting the instance.</p>
* **Start Command**: This is the command that Cloud Foundry uses to start each
instance of your application.
This start command varies by application framework.
* **Subdomain (host) and Domain**:
The route, which is the combination of subdomain and domain, must be globally
unique.
This is true whether you specify a portion of the route or allow Cloud Foundry
to use defaults.
* **Services**: Applications can bind to services such as databases, messaging,
and key-value stores.
Applications are deployed into application spaces.
An application can only bind to a service that has an existing instance in the
target application space.

### <a id='defining-options'></a>Define Deployment Options ###

You can define deployment options on the command line, in a manifest file, or
both together.
See [Deploying with Application Manifests](./manifest.html) to learn how
application settings change from push to push, and how command-line options,
manifests, and commands like `cf scale` interact.

When you deploy an application while it is running, Cloud Foundry stops all instances of that application and then deploys.
Users who try to run the application get a "404 not found" message while `cf push` runs.
Stopping all instances is necessary to prevent two versions of your code from running at the same time.
A worst-case example would be deploying an update that involved a database
schema migration, because instances running the old code would not work and
users could lose data.

Cloud Foundry uploads all application files except version control files with
file extensions `.svn`, `.git`, and `.darcs`.
To exclude other files from upload, specify them in a `.cfignore` file in the
directory where you run the push command.
This technique is similar to using a `.gitignore` file.
For more information, see the [Ignore Unnecessary Files When Pushing](./prepare-to-deploy.html#exclude) section of the [Considerations for Designing and Running an Application in the Cloud](./prepare-to-deploy.html) topic.

For more information about the manifest file, see the [Deploying with Application Manifests](./manifest.html) topic.

### <a id='set-env'></a>Set Environment Variables

Environment variables are key-value pairs defined at the operating system level. These key-value pairs provide a way to configure the applications running on a system. 
For example, any application can access the LANG environment variable to determine which language to use for error messages and instructions, collating sequences, and date formats.

You can set environment variables for an application in one of three ways:

* Using the cf CLI. See the following example:

    <pre class='terminal'>
    $ cf set-env APP-NAME ENV-VAR-NAME ENV-VAR-VALUE
    Setting env variable 'ENV-VAR-NAME' to 'ENV-VAR-VALUE' for app spring-music in org example / space development as user@example.com...
    OK
    TIP: Use 'cf restage' to ensure your env variable changes take effect
    </pre>

    <p class="note"><strong>Note</strong>: The cf CLI offers the most convenient and flexible way to set environment variables.</p> 

* In an application manifest. See the <a href="manifest.html#env-block">Environment Variables</a> section of the Deploying with Environment Variables topic.

* In a `.profile` file. See the <a href="#profile">Configure Runtime Hooks</a> section below.

Cloud Foundry sources environment variables in the following order: the application manifest, then the cf CLI, and finally the `.profile` file. 
For example, an environment variable set in the `.profile` file overwrites an environment variable set in the application manifest and the cf CLI.

### <a id='profile'></a>Configure Runtime Hooks <span style="font-size:1rem">(available in Diego <a href="https://github.com/cloudfoundry/cf-release/releases/tag/v238">cf-release v238</a>)</span> ###

To execute runtime hooks, insert a `.profile` file into the root of your application directory. This file should contain `bash` script that performs application-specific initialization tasks. 

When an application container starts, a `bash` shell executes the `.profile` file after sourcing the application's environment variables from the application manifest and the cf CLI. 
Because the `.profile` script executes after the buildpack, the script also has access to the language runtime environment created by the buildpack. 

<p class="note"><strong>Note</strong>: Your application root directory may also include a <code>.profile.d</code> directory that contains bash scripts that perform initialization tasks for the buildpack. Developers should not edit these scripts unless they are using a <a href="../../buildpacks/custom.html">custom buildpack</a>.</p>

<p class="note"><strong>Note</strong>: If you are using the PHP buildpack v4.3.18 or earlier, the buildpack will not execute your PHP app's <code>.profile</code> script. Your PHP app will host the <code>.profile</code> script's contents. This means that any PHP app staged using the affected PHP Buildpack versions can leak credentials placed in the <code>.profile</code> script.</p>

## <a id='push'></a>Step 5: Push the Application ##

Run the following command to deploy an application without a manifest:

  `cf push APP-NAME`

If you provide the application name in a manifest, you can reduce the command to
`cf push`.
See [Deploying with Application Manifests](./manifest.html).

Since all you have provided is the name of your application, `cf push` sets the
number of instances, amount of memory, and other attributes of your application
to the default values.
You can also use command-line options to specify these and additional
attributes.

The following transcript illustrates  how Cloud Foundry assigns default values
to application when given a `cf push` command.

<p class ="note"><strong>Note</strong>: When deploying your own apps, avoid generic names like <code>my-app</code>. Cloud Foundry uses the app name to compose the route to the app, and deployment fails unless the app has a globally unique route.</p>

<pre class="terminal">
    $ cf push my-app
    Creating app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
    OK

    Creating route my-app.<%=vars.app_domain%>...
    OK

    Binding my-app.<%=vars.app_domain%> to my-app...
    OK

    Uploading my-app...
    Uploading app: 560.1K, 9 files
    OK

    Starting app my-app in org example-org / space development as a.user@<%= vars.app_domain %>...
    -----> Downloaded app package (552K)
    OK
    -----> Using Ruby version: ruby-1.9.3
    -----> Installing dependencies using Bundler version 1.3.2
           Running: bundle install --without development:test --path
             vendor/bundle --binstubs vendor/bundle/bin --deployment
           Installing rack (1.5.1)
           Installing rack-protection (1.3.2)
           Installing tilt (1.3.3)
           Installing sinatra (1.3.4)
           Using bundler (1.3.2)
           Updating files in vendor/cache
           Your bundle is complete! It was installed into ./vendor/bundle
           Cleaning up the bundler cache.
    -----> Uploading droplet (23M)

    1 of 1 instances running

    App started

    Showing health and status for app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
    OK

    requested state: started
    instances: 1/1
    usage: 1G x 1 instances
    urls: my-app.<%=vars.app_domain%>

         state     since                    cpu    memory        disk
    #0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G

</pre>

## <a id='service-connection'></a>Step 6: (Optional) Configure Service Connections ##

If you bound a service to the application that you deployed, you might need to
configure your application with the service URL and credentials.
For more information, see the specific documentation for your application
framework:

* [Ruby](../../buildpacks/ruby/ruby-service-bindings.html)
* [Node.js](../../buildpacks/node/node-service-bindings.html)
* [Spring](../../buildpacks/java/spring-service-bindings.html)
* [Grails](../../buildpacks/java/grails-service-bindings.html)

## <a id='troubleshoot-push'></a>Step 7: Troubleshoot Deployment Problems ##

If your application does not start on Cloud Foundry, first ensure that your
application can run locally.

You can troubleshoot your application in the cloud using the cf CLI.
See [Troubleshoot Application Deployment and Health](./troubleshoot-app-health.html).
