---
title: Pushing an App
owner: CAPI
---

This topic describes how to use the Cloud Foundry Command Line Interface (cf CLI) to push an app to <%= vars.product_full %>.

## <a id="overview"></a> Overview

The cf CLI command `cf push` pushes apps to <%= vars.product_short %>.
The `cf push` command uses flags and helper files that determine the following:

* How the pushed app runs, including its route (URL), instance count, and memory limits.
* How the push process works: whether it's configured with a manifest, runs a startup script, or limits files uploaded to the Cloud Controller.

To push an app using `cf push`, do the following:

1. [Determine `cf push` Options](#options)
1. [Push the App](#push)
1. [(Optional) Configure App Services](#services)

For an explanation of what <%= vars.product_short %> does when you run `cf push`, see [How Apps are Staged](../../concepts/how-applications-are-staged.html).

For information about the lifecycle of an app, see [App Container Lifecycle](./app-lifecycle.html)

## <a id='prepare'></a> Prerequisites

Before you push your app to <%= vars.product_short %>, make sure that:

* Your app is *cloud-ready*.
<%= vars.product_short %> behaviors related to file storage, HTTP sessions, and port usage
may require modifications to your app.
For help preparing your app to be pushed to <%= vars.product_short %>, see:
  - [Considerations for Designing and Running an App in the Cloud](./prepare-to-deploy.html)
  - Any [Buildpacks](../../buildpacks/index.html) guides specific to your app language or framework, such as [Getting Started Deploying Ruby on Rails Apps](../../buildpacks/ruby/gsg-ror.html)

* Your <%= vars.product_short %> installation supports the type of app you are going to
push, or you have the URL of an externally-available buildpack that can stage
the app.

* All required app resources are uploaded.
For example, you may need to include a database driver.

* Your app can access an instance of every service that it needs, because the service instance is running in, or shared with, the app's space. See [Determine the Org and Space](#space).

* You have your target and credentials:
  - The API endpoint for your <%= vars.product_short %> installation. Also known as the target
URL, this is <%=vars.api_endpoint%>.
  - Your username and password for your <%= vars.product_short %> installation.

## <a id='options'></a>Determine cf push Options

Before you push an app, you need to collect basic field values and make some choices.

### <a id='basic'></a>Collect Basic Field Values

Before you push an app, you need values for the following fields:

* **Name**: You can use any series of alphanumeric characters as the name of your app.
* **Instances**: Generally speaking, the more app instances you run, the less
downtime your app will experience.
If your app is still in development, running a single instance can simplify troubleshooting.
For any production app, <%= vars.recommended_by %> recommends a minimum of two instances.
* **Memory Limit**: The maximum amount of memory that each instance of your
app can consume.
If an instance exceeds this limit, <%= vars.product_short %> restarts the instance.
If an instance exceeds its memory limit repeatedly in a short period of time, <%= vars.product_short %>
	delays restarting the instance.
* **Start Command**: This is the command that <%= vars.product_short %> uses to start each
instance of your app.
This start command differs by app framework.

### <a id='space'></a>Determine the Org and Space

A <%= vars.product_short %> workspace is organized into orgs, and within them, spaces.
Apps are pushed into app spaces.

As a <%= vars.product_short %> user, you may have access to one or more orgs and spaces.
Before pushing an app, you must:

* Decide the target org and space where you want to push your app.

### <a id='service'></a>Confirm Service Accessibility

Apps use services such as databases, messaging, and key-value stores.
To use a service, the app must bind to an instance of the service that is running in the same space or shared with its space. Before pushing an app, you must:

* Confirm that every service that your app uses has an instance that the app can access.

See [Sharing Service Instances](../services/sharing-instances.html) for how to share service instances across spaces.

### <a id='route'></a>Determine the Route

<%= vars.product_short %> directs requests to an app based on its route.
The route is a URL made up of a hostname and a domain, as in `https://HOSTNAME.example.com`.

You can let `cf push` use a default app route, or specify a different route by customizing its hostname or domain.

For more information about domains, see [Routes and Domains](./routes-domains.html).

#### Default Route

<%= vars.product_short %> defaults an app's route as follows:

* **Hostname**: The name of the app.
  - If the app name contains underscores, <%= vars.product_short %> converts them to hyphens when creating the app's route.

* **Domain**: The default apps domain for the <%= vars.product_short %> installation.

<%=vars.ssl%>

#### (Optional) Customize the Route

To customize an app's route, do the following:

* **Hostname**
  - Pass the custom hostname into `cf push` with the `-n` flag.

* **Domain**
  - Pass the custom domain into `cf push` with the `-d` flag.
  The custom domain must be registered, and mapped to the org that contains the app's target space

#### Ensure Uniqueness

The app's route must be globally unique, whether you use the <%= vars.product_short %> defaults
or a custom host or domain.

To help ensure route uniqueness you can use the `--random-route` option with `cf push`.
`--random-route` creates a route that contains the app name and random words

### <a id='exclude'></a>(Optional) Limit the Upload Files

By default, <%= vars.product_short %> uploads all app files except version control files and
folders with names such as `.svn`, `.git`, and `_darcs`.

<%= vars.recommended_by %> recommends that you explicitly exclude extraneous files residing within your app directory, particularly if your app is large.
For example, if you build your app locally and push it as a binary, you can save resources by not uploading any of the app's source code.

To exclude files from upload, specify them in a `.cfignore` file in the
directory where you run the `cf push` command.

For more information, see the [Ignore Unnecessary Files When Pushing](./prepare-to-deploy.html#exclude) section of the [Considerations for Designing and Running an App in the Cloud](./prepare-to-deploy.html) topic.

### <a id='profiled'></a>(Optional) Configure Pre-Runtime Hooks

<p class="note"><strong>Note</strong>: The Java buildpack does not support pre-runtime hooks.</p>

To run custom initialization tasks for your app, include them in a `.profile` file in the root of your app directory. After <%= vars.product_short %> loads the buildpack for an app, it executes any `.profile` file that it finds, and the `.profile` tasks can access the language runtime environment.

After <%= vars.product_short %> runs `.profile` tasks, it starts the app instance itself.

As an example, the following `.profile` file uses `bash` to set a value for the environment variable `LANG`. Setting this value at the operating system level lets the app determine which language to use for error messages and instructions, collating sequences, and date formats:

~~~bash
# Set the default LANG for your apps
export LANG=en_US.UTF-8
~~~

Your app root directory may also include a `.profile.d` directory that contains bash scripts that perform initialization tasks for the buildpack.
Developers should not edit these scripts unless they are using a [custom buildpack](../../buildpacks/custom.html).


<p class="note"><strong>Note</strong>: If you are using a PHP buildpack version prior to v4.3.18, the buildpack does not execute your PHP app's <code>.profile</code> script. Your PHP app will host the <code>.profile</code> script's contents.
This means that any PHP app staged using the affected PHP buildpack versions can leak credentials placed in the <code>.profile</code> script.</p>

## <a id='push'></a> Push the App

To push an app with default values for the number of instances, amount of memory, and other attributes, run the following command:

  `cf push APP-NAME`

To specify options, as described in [Determine cf push Options](#options), you can include them in the `cf push` command itself, in a `manifest.yml` file, or both.

A manifest file can also include a [Services](./manifest-attributes.html#services-block) block that lists service instances for the app to bind to automatically.

See [Deploying with App Manifests](./manifest.html) to learn how app settings change from push to push, and how command-line options, manifests, and commands like `cf scale` interact.

### <a id='updates'></a> App Updates and Downtime

When you push an app that is already running, <%= vars.product_short %> stops all existing instances of that app. Users who try to access the app get a "404 Not Found" message while `cf push` runs.

With some app updates, old and new versions of your code should never run at the same time. A worst-case example is if your app update migrates a database schema, causing old app instances to fail and lose user data.  To prevent this, you need to stop all running instances of your app before you push the new version.

When old and new versions of your app can run simultaneously, you can avoid app downtime by using the [blue-green method](./blue-green.html) to swap routes between app versions running in parallel.

### <a id='example'></a> Example Session

The following session illustrates  how <%= vars.product_short %> assigns default values
to app when given a `cf push` command.

<pre class="terminal">
	$ cf push my-app-1234
	Creating app my-app-1234 in org example-org / space development as a.user@<%=vars.app_domain%>...
	OK

	Creating route my-app-1234.<%=vars.app_domain%>...
	OK

	Binding my-app-1234.<%=vars.app_domain%> to my-app-1234...
	OK

	Uploading my-app-1234...
	Uploading app: 560.1K, 9 files
	OK

	Starting app my-app-1234 in org example-org / space development as a.user@<%= vars.app_domain %>...
	-----> Downloaded app package (552K)
	OK
	-----> Using Ruby version: ruby-1.9.3
	-----> Installing dependencies using Bundler version 1.3.2
	       Running: bundle install --without development:test --path
	         vendor/bundle --binstubs vendor/bundle/bin --deployment
	       Installing rack (1.5.1)
	       Installing rack-protection (1.3.2)
	       Installing tilt (1.3.3)
	       Installing sinatra (1.3.4)
	       Using bundler (1.3.2)
	       Updating files in vendor/cache
	       Your bundle is complete! It was installed into ./vendor/bundle
	       Cleaning up the bundler cache.
	-----> Uploading droplet (23M)

	1 of 1 instances running

	App started

	Showing health and status for app my-app-1234 in org example-org / space development as a.user@<%=vars.app_domain%>...
	OK

	requested state: started
	instances: 1/1
	usage: 1G x 1 instances
	urls: my-app-1234.<%=vars.app_domain%>

	     state     since                    cpu    memory        disk
	#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G

</pre>

## <a id='services'></a>(Optional) Configure App Services

If a newly-pushed app has the same name and route as an older app version, the new app retains the service bindings and service configuration of the previously-pushed version.

For apps that are not already set up for the services that they use, you need to:

1. Bind the services to the app. For more information about services, see the [Services Overview](../services/index.html) topic.

1. (Optional) Configure the app with the service URL and credentials, if needed. For more information, see the specific documentation for your app framework, such as:
  - [Ruby](../../buildpacks/ruby/ruby-service-bindings.html)
  - [Node.js](../../buildpacks/node/node-service-bindings.html)
  - [Spring](../../buildpacks/java/configuring-service-connections/spring-service-bindings.html)
  - [Grails](../../buildpacks/java/configuring-service-connections/grails-service-bindings.html)

## <a id='troubleshoot-push'></a>Troubleshoot App Push Problems

If your app does not start on <%= vars.product_short %>, first ensure that the app can run locally.

For how to troubleshoot your app in the cloud using the cf CLI, see [Troubleshoot App Deployment and Health](./troubleshoot-app-health.html).
