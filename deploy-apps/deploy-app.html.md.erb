---
title: Pushing an App
owner: CAPI
---

This topic describes how to use the Cloud Foundry Command Line Interface (cf CLI) to push an app to <%= vars.product_full %>.

## <a id="overview"></a> Overview

The cf CLI command `cf push` pushes apps to <%= vars.product_short %>.
To push an app using `cf push`, do the following:

1. [(Optional) Configure Domains](#domain)
1. [Determine `cf push` Options](#options)
1. [Push the App](#push)

For help preparing to push your app, see:

* [Considerations for Designing and Running an App in the Cloud](./prepare-to-deploy.html)
* Any [Buildpacks](../../buildpacks/index.html) guides specific to your app language or framework, such as [Getting Started Deploying Ruby on Rails Apps](../../buildpacks/ruby/gsg-ror.html)

## <a id='prepare'></a> Prerequisites

Before you push your app to <%= vars.product_short %>, make sure that:

* Your app is *cloud-ready*.
<%= vars.product_short %> behaviors related to file storage, HTTP sessions, and port usage
may require modifications to your app.

* All required app resources are uploaded.
For example, you may need to include a database driver.

* Extraneous files and artifacts are excluded from upload.
You should explicitly exclude extraneous files that reside within your
app directory structure, particularly if your app is large.

* Every service that your app needs has an instance that it can access, for example running in the same space.

* Your <%= vars.product_short %> installation supports the type of app you are going to
push, or you have the URL of an externally-available buildpack that can stage
the app.

* You have all of the following:
  - The API endpoint for your <%= vars.product_short %> installation. Also known as the target
URL, this is <%=vars.api_endpoint%>.
  - Your username and password for your <%= vars.product_short %> installation.
  - The organization and space where you want to deploy your app.
A <%= vars.product_short %> workspace is organized into organizations, and within them,
spaces.
As a <%= vars.product_short %> user, you may have access to one or more organizations and
spaces.

## <a id='domain'></a>(Optional) Configure Domains

<%= vars.product_short %> directs requests to an app using a route, which is a URL
made up of a host and a domain.

* The name of an app is the default host for that app, unless you specify the host name with the <code>-n</code> flag.

* Every app is pushed to a space that belongs to a domain.
Every <%= vars.product_short %> installation has a default domain.
You can specify a custom domain for the app if
  - The domain is registered
  - The domain is mapped to the org that contains the target space for the app

<p class='note'><strong>Note</strong>:
<%= vars.product_short %> ​allows​ app names, but not app URLs, to include underscores.
<%= vars.product_short %> converts underscores to hyphens when setting a default app URL from an app name.
</p>

* The URL for your app must be different from other apps hosted by <%=vars.product_short%>.
The following `cf push` options can help create a unique URL:
   - `-n` assigns a different HOST name for the app
   - `--random-route` creates a URL that includes the app name and random words

 <p class='note'><strong>Note</strong>: Run <code>cf help push</code> to view other options for the <code>cf push</code> command.</p>

<%=vars.ssl%>

For more information about domains, see [Routes and Domains](./routes-domains.html).

## <a id='options'></a>Determine Push Options

Before you push an app, you need to decide on the following:

* **Name**: You can use any series of alphanumeric characters as the name of your app.
* **Instances**: Generally speaking, the more app instances you run, the less
downtime your app will experience.
If your app is still in development, running a single instance can
simplify troubleshooting.
For any production app, we recommend a minimum of two instances.
* **Memory Limit**: The maximum amount of memory that each instance of your
app can consume.
If an instance exceeds this limit, <%= vars.product_short %> restarts the instance.
    <p class='note'><strong>Note</strong>: Initially, <%= vars.product_short %> immediately
	restarts any instances that exceed the memory limit. If an instance
	repeatedly exceeds the memory limit in a short period of time, <%= vars.product_short %>
	delays restarting the instance.</p>
* **Start Command**: This is the command that <%= vars.product_short %> uses to start each
instance of your app.
This start command varies by app framework.
* **Subdomain (host) and Domain**:
The route, which is the combination of subdomain and domain, must be globally
unique.
This is true whether you specify a portion of the route or allow <%= vars.product_short %>
to use defaults.
* **Services**: Apps can bind to services such as databases, messaging,
and key-value stores.
Apps are deployed into app spaces.
An app can only bind to a service that has an existing instance in the
target app space.

### <a name='manifests'></a>Manifests

You can define push options on the command line, in a manifest file, or
both.

See [Deploying with App Manifests](./manifest.html) to learn how
app settings change from push to push, and how command-line options,
manifests, and commands like `cf scale` interact.

For more information about the manifest file, see the [Deploying with App Manifests](./manifest.html) topic.

### <a name='exclude'></a>Exclude Files

<%= vars.product_short %> uploads all app files except version control files and
folders with names such as `.svn`, `.git`, and `_darcs`.

To exclude other files from upload, specify them in a `.cfignore` file in the
directory where you run the `cf push command.
For more information, see the [Ignore Unnecessary Files When Pushing](./prepare-to-deploy.html#exclude) section of the [Considerations for Designing and Running an App in the Cloud](./prepare-to-deploy.html) topic.

### <a name='profile'></a>Pre-Runtime Hooks

<p class="note"><strong>Note</strong>: The Java buildpack does not support pre-runtime hooks.</p>

To run custom initialization tasks for your app, include them in a `.profile` file in the root of your app directory. After <%= vars.product_short %> loads the buildpack for an app, it executes any `.profile` file that it finds, and the `.profile` tasks can access the language runtime environment. After <%= vars.product_short %> runs `.profile` tasks, it starts the app instance itself.

As an example, the following `.profile` file uses `bash` to set a value for the environment variable `LANG`. Setting this value at the operating system level lets the app determine which which language to use for error messages and instructions, collating sequences, and date formats:

~~~bash
# Set the default LANG for your apps
export LANG=en_US.UTF-8
~~~

Your app root directory may also include a `.profile.d` directory that contains bash scripts that perform initialization tasks for the buildpack.
Developers should not edit these scripts unless they are using a [custom buildpack](../../buildpacks/custom.html).


<p class="note"><strong>Note</strong>: If you are using a PHP buildpack version prior to v4.3.18, the buildpack does not execute your PHP app's <code>.profile</code> script. Your PHP app will host the <code>.profile</code> script's contents.
This means that any PHP app staged using the affected PHP buildpack versions can leak credentials placed in the <code>.profile</code> script.</p>

## <a id='push'></a> Push the App

Run the following command to push an app without a manifest:

  `cf push APP-NAME`

If you provide the app name in a manifest, you can reduce the command to
`cf push`.
See [Deploying with App Manifests](./manifest.html).

Because all you have provided is the name of your app, `cf push` sets the
number of instances, amount of memory, and other attributes of your app
to the default values.
You can also use command-line options to specify these and additional
attributes.

### <a id='updates'></a> App Updates

When you push an app that is already running, <%= vars.product_short %> stops all existing instances of that app. Users who try to access the app get a "404 not found" message while `cf push` runs.

To prevent two versions of your code from running at the same time, you need to stop all running instances of your app. A worst-case example of not doing this is: your app update migrates a database schema, instances running the old code fail, and users lose data.

### <a id='example'></a> Example Session

The following session illustrates  how <%= vars.product_short %> assigns default values
to app when given a `cf push` command.

<p class ="note"><strong>Note</strong>: When deploying your own apps, avoid generic names like <code>my-app</code>. <%= vars.product_short %> uses the app name to compose the route to the app, and deployment fails unless the app has a globally unique route.</p>

<pre class="terminal">
	$ cf push my-app
	Creating app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
	OK

	Creating route my-app.<%=vars.app_domain%>...
	OK

	Binding my-app.<%=vars.app_domain%> to my-app...
	OK

	Uploading my-app...
	Uploading app: 560.1K, 9 files
	OK

	Starting app my-app in org example-org / space development as a.user@<%= vars.app_domain %>...
	-----> Downloaded app package (552K)
	OK
	-----> Using Ruby version: ruby-1.9.3
	-----> Installing dependencies using Bundler version 1.3.2
	       Running: bundle install --without development:test --path
	         vendor/bundle --binstubs vendor/bundle/bin --deployment
	       Installing rack (1.5.1)
	       Installing rack-protection (1.3.2)
	       Installing tilt (1.3.3)
	       Installing sinatra (1.3.4)
	       Using bundler (1.3.2)
	       Updating files in vendor/cache
	       Your bundle is complete! It was installed into ./vendor/bundle
	       Cleaning up the bundler cache.
	-----> Uploading droplet (23M)

	1 of 1 instances running

	App started

	Showing health and status for app my-app in org example-org / space development as a.user@<%=vars.app_domain%>...
	OK

	requested state: started
	instances: 1/1
	usage: 1G x 1 instances
	urls: my-app.<%=vars.app_domain%>

	     state     since                    cpu    memory        disk
	#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G

</pre>
