---
title: Deploy an Application
---
_This page assumes that you are using cf v6._

## <a id='intro'></a>Overview of Deployment Process ##

You deploy an application to Cloud Foundry by running a `push` command from a
Cloud Foundry command line interface (CLI). Refer to the [Install cf v6](../installcf/install-go-cli.html) topic for more information.
Between the time you run `push` and the time that the application is available,
Cloud Foundry:

* Uploads and stores application files
* Examines and stores application metadata
* Creates a "droplet" (the Cloud Foundry unit of execution) for the application
* Selects an appropriate droplet execution agent (DEA) to run the droplet
* Starts the application

An application that uses services, such as a database, messaging, or email
server, is not fully functional until you *provision* the service and, if
required, *bind* the service to the application.

## <a id='prepare'></a>Step 1: Prepare to Deploy ##

Before you deploy your application to Cloud Foundry, make sure that:

* Your application is *cloud-ready*.
Cloud Foundry behaviors related to file storage, HTTP sessions, and port usage
may require modifications to your application.

* All required application resources are uploaded.
For example, you may need to include a database driver.

* Extraneous files and artifacts are excluded from upload.
You should explicitly exclude extraneous files that reside within your
application directory structure, particularly if your application is large.

* An instance of every service that your application needs has been created.

* Your Cloud Foundry instance supports the type of application you are going to
deploy, or you have the URL of an externally available buildpack that can stage
the application.

For help preparing to deploy your application, see:

* [Prepare to Deploy](prepare-to-deploy.html)
* [Tips for Ruby Developers](../../buildpacks/ruby/ruby-tips.html)
* [Tips for Node.js Developers](../../buildpacks/node/node-tips.html)
* [Tips for Java Developers](../../buildpacks/java/java-tips.html)

## <a id='logon-target'></a>Step 2: Know Your Credentials and Target ##

Before you can push your application to Cloud Foundry you need to know:

* The API endpoint, also known as the target URL, for your Cloud Foundry
instance.
This is a URL that typically begins with "api."
Consult your cloud operator if you are unsure of your API endpoint.
* Your username and password for your Cloud Foundry instance.
* The organization and space where you want to deploy your application.
A Cloud Foundry workspace is organized into organizations, and within them,
spaces.
As a Cloud Foundry user, you have access to one or more organizations and
spaces.

## <a id='domain'></a>Step 3: (Optional) Configure Domains ##

Cloud Foundry directs requests to an application using a route, which is a URL
made up of a subdomain and a domain.

* The subdomain is also known as the host portion of the URL.
The name of an application is the default subdomain for that application.

* Every application is deployed to an application space that belongs to a
domain.
Every Cloud Foundry instance has a default domain defined.
You can specify a non-default domain when deploying, provided that the domain is
registered and is mapped to the organization which contains the target
application space.

For more information, see [About Domains, Subdomains and Routes](./domains-routes.html).

## <a id='options'></a>Step 4: Determine Deployment Options ##

Before you deploy, you need to decide on the following:

* **Name**: You can use any series of alpha-numeric characters, without spaces,
as the name of your application.
* **Instances**: Generally speaking, the more instances you run, the less
downtime your application is likely to have.
If your application is still in development, running a single instance makes it
easier to troubleshoot.
For any production application, you should run a minimum of two instances.
* **Memory Limit**: The maximum amount of memory that each instance of your
application is allowed to consume.
If an instance exceeds this limit, the instance is restarted.
If the instance has to be restarted too often, it is terminated.
To prevent this we recommend being generous with your memory limit.
* **Start Command**: This is the command that Cloud Foundry uses to start each
instance of your application.
This start command varies by application framework.
* **Subdomain (host) and Domain**:
The route, which is the combination of subdomain and domain, must be globally
unique.
This is true whether you specify a portion of the route or allow Cloud Foundry
to use defaults.
* **Services**: Applications can bind to services such as databases, messaging,
and key-value stores.
Applications are deployed into application spaces.
An application can only bind to a service that has an existing instance in the
target application space.

### <a id='defining-options'></a>Define Deployment Options ###

You can define deployment options on the command line, in a
manifest file, or both together.
See [Deploying with Application Manifests](./manifest.html) to learn how
application settings change from push to push, and how command-line options,
manifests, and commands like `cf scale` interact.

When you deploy an application while it is running, `cf` stops all instances of
that application and then deploys.
Users who try to run the application get a "404 not found" message while cf push
is running.
Stopping all instances is necessary to prevent two versions of your code running
at the same time.
A worst-case example would be deploying an update that involved a database
schema migration, because instances running the old code would not work and
users could lose data.

`cf` uploads all application files except version control files with file
extensions `.svn`, `.git`, and `.darcs`.
To exclude other files from upload, specify them in a `.cfignore` file in the
directory where you run the push command.
This technique is similar to using a `.gitignore` file.
For more information, see [Prepare to Deploy an Application](./prepare-to-deploy.html#exclude).

For more information about the manifest file, see the [Deploying with Application Manifests](./manifest.html).

## <a id='push'></a>Step 5: Push the Application ##

The minimal command for deploying an application without a manifest is:

 `cf push <appname>`

If you provide the application name in a manifest, you can reduce the command
even further, to `cf push`.
See [Deploying with Application Manifests](./manifest.html).

Since all you have provided is the name of your application, `cf push` sets the
number of instances, amount of memory, and other attributes of your application
to the default values.
You can also use command-line options to specify these and additional
attributes.

The following transcript, generated when joeclouduser deployed the "my-app"
Sinatra application, shows how cf assigns default values to application when
given a minimal push command.

**Note**: When deploying your own apps, avoid generic names like `my-app`,
because a route containing a generic host like `my-app` is unlikely to be
unique.
Deployment fails unless the application has a globally unique route.

<pre class="terminal">
	$ cf push my-app
	Creating app my-app in org joeclouduser-org / space development as joeclouduser@<%=vars.app_domain%>...
	OK

	Creating route my-app.<%=vars.app_domain%>...
	OK

	Binding my-app.<%=vars.app_domain%> to my-app...
	OK

	Uploading my-app...
	Uploading app: 560.1K, 9 files
	OK

	Starting app my-app in org joeclouduser-org / space development as joeclouduser@<%= vars.app_domain %>...
	-----> Downloaded app package (552K)
	OK
	-----> Using Ruby version: ruby-1.9.3
	-----> Installing dependencies using Bundler version 1.3.2
	       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin --deployment
	       Installing rack (1.5.1)
	       Installing rack-protection (1.3.2)
	       Installing tilt (1.3.3)
	       Installing sinatra (1.3.4)
	       Using bundler (1.3.2)
	       Updating files in vendor/cache
	       Your bundle is complete! It was installed into ./vendor/bundle
	       Cleaning up the bundler cache.
	-----> Uploading droplet (23M)

	1 of 1 instances running

	App started

	Showing health and status for app my-app in org joeclouduser-org / space development as joeclouduser@<%=vars.app_domain%>...
	OK

	requested state: started
	instances: 1/1
	usage: 1G x 1 instances
	urls: my-app.<%=vars.app_domain%>

	     state     since                    cpu    memory        disk
	#0   running   2014-01-24 05:07:18 PM   0.0%   18.5M of 1G   52.5M of 1G

</pre>

## <a id='service-connection'></a>Step 6: (Optional) Configure Service Connections ##

If you bound a service to the application you deployed, it may be necessary to
configure your application with the service URL and credentials.
For more information, see the specific documentation for your application
framework:

* [Ruby](../../buildpacks/ruby/ruby-service-bindings.html)
* [Node.js](../../buildpacks/node/node-service-bindings.html)
* [Spring](../../buildpacks/java/spring-service-bindings.html)
* [Grails](../../buildpacks/java/grails-service-bindings.html)

## <a id='troubleshoot-push'></a>Step 7: Troubleshoot Deployment Problems ##

If your application does not start on Cloud Foundry, first check that your
application can run locally.

You can troubleshoot your application in the cloud using `cf`.

### <a id='health'></a>Check Health and Status ###

To check the health and status of your application, use `cf app <appname>`.

For example:

<pre class="terminal">
$ cf app my-app
Showing health and status for app my-app in org joeclouduser-org / space development as joeclouduser@<%=vars.app_domain%>...
OK

requested state: started
instances: 1/1
usage: 256M x 1 instances
urls: my-app999.<%=vars.app_domain%>

     state     since                    cpu    memory          disk
#0   running   2014-01-27 11:59:30 AM   0.0%   18.5M of 256M   52.5M of 1G
</pre>

### <a id='env'></a>Examine Environment Variables ###

`cf push` deploys the application to a container on the server.
The environment variables that reside in the container are the environment variables of your application.

You can set environment variables in a manifest created before you deploy.
See [Deploying with Application Manifests](./manifest.html).

You can also set an environment variable with a `cf set-env` command followed by a `cf push` command:

* Once you run `cf env`, you can see the variable locally.
* However, you must run `cf push` again for the variable to take effect in the container environment.

To see the environment variables that you have set using the `cf set-env` command:

  `cf env <appname>`
To see the variables in the container environment:

  `cf files <appname> logs/env.log`

### <a id='logs'></a>Logs ###

To see recent log entries:

  `cf logs <appname> --recent`
To see log entries in real time:

  `cf logs <appname>`
To explore all logs available in the container, first view the log filenames, then view the log that interests you:

<pre class="terminal">
$ cf files my-app logs/
	Getting files for app my-app in org joeclouduser-org / space development as joeclouduser@<%=vars.app_domain%>...
	OK

	env.log                                   932B
	staging_task.log                          844B
	stderr.log                                182B
	stdout.log                                  0B

$ cf files my-app logs/stderr.log
	Getting files for app my-app in org joeclouduser-org / space development as joeclouduser@<%=vars.app_domain%>...
	OK

	[2014-01-27 20:21:58] INFO  WEBrick 1.3.1
	[2014-01-27 20:21:58] INFO  ruby 1.9.3 (2013-11-22) [x86_64-linux]
	[2014-01-27 20:21:58] INFO  WEBrick::HTTPServer#start: pid=31 port=64391
</pre>
