---
title: Routes and Domains
owner: Routing
---

<strong><%= modified_date %></strong>

<% $this_topic = 'routes-domains' %>

_This page assumes you are using cf CLI v6._

<p class="note">
	<strong>Note</strong>: The term <em>domain</em> in this topic differs from its common use and is specific to <%=vars.product_full%>. Likewise, <em>shared domain</em> and <em>private domain</em> refer to resources with specific meaning in <%=vars.product_short%>. The use of <em>domain name</em>, <em>root domain</em>, and <em>subdomain</em> refers to DNS records.
</p>


## <a id='routes'></a>Routes ##

HTTP requests are routed to applications pushed to <%=vars.product_short%> by associating an application with a URL, known as a route. This association can be called a mapping. For example, a developer might say, "I mapped route `myapp.<%=vars.app_domain%>` to app `myapp`".

Many apps can be mapped to a single route resulting in load balanced requests for the route across all instances of all mapped apps. This approach makes the blue/green deploy strategy possible. An individual app can also be mapped to multiple routes, granting multiple URLs access to the app.

Routes belong to a space, so that only apps in the same space can be mapped to a route. Routes are globally unique, so that member users of one space cannot create a route with the same URL as members of another space, regardless of which orgs control these spaces.

### <a id='create-route'></a>Create a Route ###

Routes can be created and reserved for later use. They do not need to be immediately mapped to an application. Additionally, they will persist after being unmapped from an application.

Routes are based on a domain plus an optional hostname, where domain is a <%=vars.product_short%> term. See [Domains](#domains) below for further detail. Three kinds of routes can be created depending on the domain and the accompanying hostname.

#### <a id='create-route-with-hostname'></a>Create a Route with Hostname ####

Routes can be created and subsequently added to an app. See [Map a Route to your App](#map-route) for further detail.

<pre class="terminal">
$ cf create-route my-space <%=vars.app_domain%> --hostname myapp
</pre>

Only requests for `http://myapp.<%=vars.app_domain%>`, `https://myapp.<%=vars.app_domain%>`, or any path under those URLs (for example `http://myapp.<%=vars.app_domain%>/bar`), will be routed to apps mapped to this route.

#### <a id='create-route-without-hostname'></a>Create a Route without Hostname ####

This approach creates a route for the domain itself and is permitted for [Private Domains](#private-domains) only.

<pre class="terminal">
$ cf create-route my-space <%=vars.private_app_domain%>
</pre>

This example creates a route in space `my-space` from domain `<%=vars.private_app_domain%>` with no hostname. If DNS has been configured correctly, <%=vars.product_short%> will route requests for `http://<%=vars.private_app_domain%>`, `https://<%=vars.private_app_domain%>`, or any path under those URLs (for example `http://<%=vars.private_app_domain%>/foo`) to applications that are mapped to the route. If there are no other routes for the domain, requests to any subdomain (for example `http://foo.<%=vars.private_app_domain%>`) will fail.

Domains can also be created in <%=vars.product_short%> for subdomains, for example `foo.<%=vars.private_app_domain%>`. Assuming DNS has been configured for this subdomain, a route created from this domain with no added host would result in requests for `http://foo.<%=vars.private_app_domain%>`, `https://foo.<%=vars.private_app_domain%>`, or any path under those URLs (for example `http://foo.<%=vars.private_app_domain%>/foo`) to be routed to applications mapped to the route.

#### <a id='create-route-with-wildcard-hostname'></a>Create a Route with Wildcard Hostname ####

To create a wildcard route submit an asterix for the hostname.

<pre class="terminal">
$ cf create-route my-space foo.<%=vars.app_domain%> --hostname *
</pre>

An application mapped to a wildcard route acts as a fallback app for route requests if the requested route does not exist. For example, if a client sends a request to `http://app.foo.<%=vars.app_domain%>` by accident, meaning to reach `myapp.foo.<%=vars.app_domain%>`, the request will be routed to the application mapped to the route `*.foo.<%=vars.app_domain%>`.

<p class="note"><strong>Note</strong>: Wildcard routes on shared domains can only  be managed by administrators, those with <code>cloudcontroller.admin</code> scope. Wildcard routes on private domains can be managed by space developers.</p>

###<a id='create-route-with-path'></a>Create a Route with a Path 

Paths can be used to route requests for the same hostname and domain to different apps.

Given three applications `products`, `orders`, and `storefront` and following routes:

<pre class="terminal">
$ cf create-route my-space <%=vars.app_domain%> --hostname store --path products
$ cf create-route my-space <%=vars.app_domain%> --hostname store --path orders
$ cf create-route my-space <%=vars.app_domain%> --hostname store
</pre>

If the first route is mapped to the `products` app, the second route to the `orders` app, and the last route to the `storefront` app, then:

- Requests to `http://store.<%=vars.app_domain%>/products` will be routed to the `products` app
- Requests to `http://store.<%=vars.app_domain%>/orders` will be routed to the `orders` app
- Requests to `http://store.<%=vars.app_domain%>` will be routed to the `storefront` app

Routes with a path will be attempted to be matched on first and then attempt to match on host and domain.

<p class="note">
	<strong>Note</strong>: Routes with the same shared domain and hostname, but different paths, may only be created in the same space. Private domains do not have this limitation.
</p>

<p class="note">
	<strong>Note</strong>: Requests for routes with a path are not routed to the root context of a mapped application, meaning that an app that is mapped to a route with a path must be able to respond to that path.
</p>

### <a id='list-routes'></a>List Routes ###

You can list routes for the current space with the `cf routes` command. A route is uniquely identified by the combination of hostname, domain, and path.

<pre class="terminal">
$ cf routes
Getting routes as user@<%=vars.private_app_domain%> ...

space      host     domain               path        apps
my-space   myapp    <%=vars.app_domain%>                myapp
my-space   myapp    <%=vars.private_app_domain%>               myapp
my-space   store    <%=vars.app_domain%>    /products   products
my-space   store    <%=vars.app_domain%>    /orders     orders
my-space   store    <%=vars.app_domain%>                storefront
</pre>

### <a id='check-routes'></a>Check whether a particular route is taken###

You may only see routes in spaces for which you are currently a member. Attempts to create a route that is already taken will fail.
To check to see if a particular route is already taken, use the `cf check-route` command.

Check if a particular route exists:

<pre class="terminal">
$ cf check-route store <%=vars.app_domain%> --path /products
Checking for route...
OK
Route store.<%=vars.app_domain%>/products does exist
</pre>

### <a id='map-route'></a>Map a Route to your Application ###

For an application to receive requests to a route, the route must be assigned, or mapped, to the app. Map a route to an application with the `cf map-route` command. If the route does not already exist, this command will also create it.

<p class="note"><strong>Note</strong>: Applications running on the legacy runtime (DEA) must be restarted after routes for an app are mapped or unmapped. Applications running on the Diego runtime do not need to be restarted.
</p>

#### <a id='map-route-manually'></a>Manually Map a Route ####

Given the following routes and applications:

<table border="1" class="nice" >
	<tr>
		<th>Route</th>
		<th>Application</th>
	</tr>
	<tr>
  <td>store.<%=vars.app_domain%>/products</td>
		<td>products</td>
	</tr>
	<tr>
  <td>store.<%=vars.app_domain%>/orders</td>
		<td>orders</td>
	</tr>
	<tr>
  <td>store.<%=vars.app_domain%></td>
		<td>storefront</td>
	</tr>
</table>

The commands below will map the above routes to their respective apps. Hostname, domain, and path are used to uniquely identify a route to map an application to.

<pre class="terminal">
$ cf map-route products <%=vars.app_domain%> --hostname store --path products
$ cf map-route orders <%=vars.app_domain%> --hostname store --path orders
$ cf map-route storefront <%=vars.app_domain%> --hostname store
</pre>

The command below maps the wildcard route `*.foo.<%=vars.app_domain%>` to the application `myfallbackapp`.

<pre class="terminal">
$ cf map-route myfallbackapp foo.<%=vars.app_domain%> --hostname *
</pre>

#### <a id='map-route-on-push'></a>Map a Route with Application Push ####

A route can be mapped to your application with the `cf push` command. The default route is based on the app name and default domain.

Push your `myapp` app to create the `myapp.<%=vars.app_domain%>` route with the default shared domain `<%=vars.app_domain%>`.  If the route has not already been created in another space this command will also map it to the app.

<pre class="terminal">
$ cf push myapp
</pre>

To customize the route during `push`, specify the domain using the `-d` flag and the hostname with the `--hostname` flag. The following command creates the `foo.<%=vars.private_app_domain%>` route for `myapp`.

<pre class="terminal">
$ cf push myapp -d <%=vars.private_app_domain%> --hostname foo
</pre>

#### <a id='map-route-with-manifest'></a>Map a Route Using Application Manifest ####

When you create or edit the manifest for an application, you can use the `host` and `domain` attributes to define the host and domain components of the application route, respectively. For more information, see [Application Manifests](../deploy-apps/manifest.html).

#### <a id='map-route-to-multiple-apps'></a>Map a Route to Multiple Apps ####

<%= partial 'routing_conflict' %>

See [Routing Conflicts](./troubleshoot-app-health.html#routing-conflict) for more information about troubleshooting this problem.

### <a id='unmap-route'></a>Unmap a Route ###

You can remove a route from an app using the `cf unmap-route` command. The route will remain reserved for later use in the space is was created until it is deleted. Hostname, domain, and path are used to uniquely identify a route to unmap.

<pre class="terminal">
$ cf unmap-route myapp <%=vars.private_app_domain%> --hostname myapp --path mypath
</pre>


### <a id='delete-route'></a>Delete a Route ###

You can delete a route from a space using the `cf delete-route` command. Hostname, domain, and path are used to uniquely identify a route to delete.

<pre class="terminal">
$ cf delete-route <%=vars.private_app_domain%> --hostname myapp --path mypath
</pre>


## <a id='domains'></a>Domains ##

Domains in <%=vars.product_short%> provide a namespace from which to create routes. The presence of a domain in <%=vars.product_short%> indicates to a developer that requests for any route created from the domain will be routed to <%=vars.product_short%>. This provision requires DNS to be configured out-of-band to resolve the domain name to the IP address of a load balancer configured to forward requests to the CF routers.

### <a id='list-domains'></a>List Domains for an Org ###

You can view available domains for the targeted organization using the `cf domains` command. In following example, there are two available domains: a system-wide shared domain `<%=vars.app_domain%>`, and the private `<%=vars.private_app_domain%>` domain.

<pre class="terminal">
$ cf domains
Getting domains in org my-org as user@mydomain.com... OK

name                 status
<%=vars.app_domain%>    shared
<%=vars.private_app_domain%>   owned
</pre>

### <a id='shared-domains'></a>Shared Domains ###

The system admin manages shared domains and those domains are available to users in all orgs. An admin can offer multiple shared domains to users, one of which is configured as the default.

Routes created for shared domains must use a hostname.

#### <a id='create-private-domain'></a>Create a Shared Domain ####

Admins can create a shared domain with the `cf create-shared-domain` command:
<pre class="terminal">
$ cf create-shared-domain <%=vars.app_domain%>
</pre>

The following example illustrates the point: CF admin John offers users the choice of creating routes for their apps from two domains by configuring CF with shared domains `<%=vars.app_domain%>` and `cf.some-company.com`. John configures the former to be the default. When developer Jane  pushes her app `awesome` to <%=vars.product_short%> and does not specify a route, she automatically creates and maps the route `awesome.<%=vars.app_domain%>` to her app. Requests to `http://awesome.<%=vars.app_domain%>` route immediately to Jane's app. If Jane wants her app to be accessible at `awesome.cf.some-company.com`, she can create this route and map it to her app.

#### <a id='delete-shared-domain'></a>Delete a Shared Domain ####

Admins can delete a shared domain from <%=vars.product_short%> with the `cf delete-shared-domain` command:

<pre class="terminal">
$ cf delete-shared-domain mydomain.com
</pre>

### <a id='private-domains'></a>Private Domains ###

Users can add *private domains* (or *custom domains*) with the Org Manager role and give members of the org permission to create routes for privately registered domain names. Private domains can additionally be shared with other organizations, enabling users of those orgs to create routes from the domain.

#### <a id='create-private-domain'></a>Create a Private Domain ####

To create a private domain:
<pre class="terminal">
$ cf create-domain my-org <%=vars.private_app_domain%>
</pre>

To create a private domain for a subdomain:
<pre class="terminal">
$ cf create-domain my-org foo.<%=vars.private_app_domain%>
</pre>

#### <a id='sharing-private-domains'></a>Sharing a Private Domain with One or More Orgs ####

As an Org Manager, you can grant or revoke access to a private domain to other orgs. You must have Org Manager permissions for all associated orgs.

<pre class="terminal">
$ cf share-private-domain test-org <%=vars.private_app_domain%>

$ cf unshare-private-domain test-org <%=vars.private_app_domain%>
</pre>

#### <a id='delete-private-domain'></a>Delete a Private Domain ####

Org Managers can delete a domain from <%=vars.product_short%> with the `cf delete-domain` command:

<pre class="terminal">
$ cf delete-domain <%=vars.private_app_domain%>
</pre>

### <a id='parent-child-domains'></a>Requirements for Parent and Child Domains ###

In the domain `myapp.<%=vars.app_domain%>`, `<%=vars.app_domain%>` is the parent domain of subdomain `myapp`.

- You can only create a private domain that is parent to a private subdomain.
- You can create a shared domain that is parent to either a shared or a private subdomain.

The domain `foo.myapp.<%=vars.app_domain%>` is the child subdomain of `myapp.<%=vars.app_domain%>`.

- You can create a private subdomain for a private parent domain only if the domains belong to the same org.
- You can create a private subdomain for a shared parent domain.
- You can only create a shared subdomain for a shared parent domain.
- You cannot create a shared subdomain for a private parent domain.

### <a id='domains-dns'></a>DNS for Domains ###

#### <a id='subdomain-dns'></a>Configuring DNS for a Subdomain of your Registered Domain ####

To use a subdomain of your registered domain name with applications on <%=vars.product_short%>, configure the subdomain as CNAME record with your DNS provider, pointing at any shared domain offered in <%=vars.product_short%>.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>myapp</td>
		<td>myapp.<%=vars.app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether the trailing <code>.</code> is required.</td>
	</tr>
	<tr>
		<td>Wildcard CNAME</td>
		<td>*</td>
		<td>foo.myapp.<%=vars.app_domain%>.</td>
		<td>You can use the wildcard in the CNAME record to point all of your subdomains to your parent domain. Each separately configured subdomain has priority over the wildcard configuration. </td>
	</tr>
</table>

#### <a id='root-domain-dns'></a>Configuring DNS for Your Registered Root Domain ####

To use your *root domain* (for example `mydomain.com`) for applications on <%=vars.product_short%> you can either use custom DNS record types like ALIAS and ANAME, if your DNS provider offers them, or *subdomain redirection*.

<p class="note"><strong>Note</strong>: Root domains are also called <em>zone apex domains</em>.</p>

If your DNS provider supports using an ALIAS or ANAME record, configure your root domain with your DNS provider to point at a shared domain in <%=vars.product_short%>.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>ALIAS or ANAME</td>
		<td>empty or @</td>
		<td><%=vars.private_app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether to use an empty or @ value for the Name entry.</td>
	</tr>
</table>

If your DNS provider does not support ANAME or ALIAS records you can use subdomain redirection, also known as *domain forwarding*, to redirect requests for your root domain to a subdomain configured as a CNAME.

<p class="note"><strong>Note</strong>: If you use domain forwarding, SSL requests to the root domain may fail if the SSL certificate only matches the subdomain.
</p>

Configure the root domain to point at a subdomain (`www`), and configure the subdomain as a CNAME record pointing at a shared domain in <%=vars.product_short%>.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>URL or Forward</td>
		<td><%=vars.private_app_domain%></td>
		<td>www.<%=vars.private_app_domain%></td>
		<td>This method results in a <code>301 permanent redirect</code> to the subdomain you configure.</td>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>www</td>
		<td>myapp.<%=vars.app_domain%></td>
		<td></td>
	</tr>
</table>
