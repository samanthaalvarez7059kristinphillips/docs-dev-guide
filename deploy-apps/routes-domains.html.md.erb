---
title: Domains and Routes
---

<strong><%= modified_date %></strong>

<% $this_topic = 'routes-domains' %>

_This page assumes you are using cf CLI v6._

<p class="note">
	<strong>Note</strong>: The term "domain" in this topic differs from its common use and is specific to Cloud Foundry. Likewise, "shared domain" and "private domain" refer to resources with specific meaning in Cloud Foundry. The use of "domain name", "root domain", and "subdomain" refers to DNS records.
</p>


## <a id='routes'></a>Routes ##

HTTP requests are routed to applications pushed to Cloud Foundry by associating an application with a url, known as a route. This association is called a mapping, as in "app myapp is mapped to route myapp.<%=vars.app_domain%>". Many apps can be mapped to a single route, resulting in requests for the route being load balanced across all instances of all mapped apps (useful for blue/green deploys). An individual app can also be mapped to multiple routes, enabling the app to be accessed via multiple urls.

Routes belong to a space, so that only apps in the same space can be mapped to a route. Routes are globally unique, so that member users of one space can not create a route with the same url as members of another space, no matter what orgs these spaces belong to.

### <a id='create-route'></a>Create a Route ###

Routes can be created and reserved for later; they don't need to be immediately mapped to an application and they will persist after being unmapped from an application.

Routes are based on a domain (a Cloud Foundry term; see [Domains](#domains) below) plus an optional hostname. Three kinds of routes can be created depending on the domain and the accompanying hostname.

#### <a id='create-route-with-hostname'></a>Create Route with Hostname ####

Routes can be created and added to an app afterward; see [Map a Route to your App](#map-route).

<pre class="terminal">
$ cf create-route my-space <%=vars.app_domain%> -n myapp
</pre>

Only requests for `http://myapp.<%=vars.app_domain%>`, `https://myapp.<%=vars.app_domain%>`, or any path under those urls (e.g. `http://myapp.<%=vars.app_domain%>/bar`), will be routed to apps mapped to this route.

#### <a id='create-route-without-hostname'></a>Create Route without Hostname ####

This creates a route for the domain itself. This is permitted for [Private Domains](#private-domains) only.

<pre class="terminal">
$ cf create-route my-space <%=vars.private_app_domain%>
</pre>

This creates a route in space `my-space` from domain `<%=vars.private_app_domain%>` with no hostname. Assuming DNS has been configured correctly, Cloud Foundry will route requests for `http://<%=vars.private_app_domain%>`, `https://<%=vars.private_app_domain%>`, or any path under those urls (e.g. `http://<%=vars.private_app_domain%>/foo`) to applications that are mapped to the route. If there are no other routes for the domain, requests to any subdomain (e.g. `http://foo.<%=vars.private_app_domain%>`) will fail.

Domains can also be created in Cloud Foundry for subdomains (e.g. `foo.<%=vars.private_app_domain%>`). Assuming DNS has been configured for this subdomain, a route created from this domain with no added host would result in requests for `http://foo.<%=vars.private_app_domain%>`, `https://foo.<%=vars.private_app_domain%>`, or any path under those urls (e.g. `http://foo.<%=vars.private_app_domain%>/foo`) to be routed to applications mapped to the route.

#### <a id='create-route-with-wildcard-hostname'></a>Create Route with Wildcard Hostname ####

When creating a route, an asterix can be submitted for the hostname. This is called a wildcard route.

<pre class="terminal">
$ cf create-route my-space foo.<%=vars.app_domain%> -n *
</pre>

An application mapped to a wildcard route is a "fallback" app that requests are routed to if the requested route doesn't exist. For example, if a client sends a request to `http://myap.foo.<%=vars.app_domain%>` in an attempt to access the application mapped to the route `myapp.foo.<%=vars.app_domain%>`, the request will be routed to the application mapped to the route `*.foo.<%=vars.app_domain%>`.

### <a id='list-routes'></a>List Routes ###

You can list routes for the current space with the `cf routes` command. A route is uniquely identified by the combination of host and domain.

<pre class="terminal">
$ cf routes
Getting routes as user@<%=vars.private_app_domain%> ...

space   host                     domain          apps
my-space    myapp                    <%=vars.app_domain%>     myapp
my-space    myapp2                    <%=vars.app_domain%>
my-space    foo                    <%=vars.private_app_domain%>     myapp
</pre>

### <a id='map-route'></a>Map a Route to your Application ###

For an application to receive requests to a route, the route must be "mapped" to the app. Map a route to an application with the `cf map-route` command. If the route does not already exist, this command will also create it.

<p class="note">
	Applications running on the legacy runtime (DEA) must be restarted after routes for an app are changed (mapped or unmapped). Applications running on the latest runtime (Diego) do not need to be restarted.
</p>

#### <a id='map-route-manually'></a>Map Route Manually ####

Use the `-n HOSTNAME` option to identfy the route to map to your application. If your route was created from a private domain without a hostname, as described in [Routes without Hostnames](#without-hostname), omit `-n`.

<pre class="terminal">
$ cf map-route myapp <%=vars.app_domain%> -n myapp
</pre>

The command below maps the wildcard route `*.foo.<%=vars.app_domain%>` to the application `myfallbackapp`.

<pre class="terminal">
$ cf map-route myfallbackapp foo.<%=vars.app_domain%> -n *
</pre>

#### <a id='map-route-on-push'></a>Map Route on Application Push ####

A route can be mapped to your application when you run `cf push`. The default route is based on the appname and default domain.

Given a default shared domain `<%=vars.app_domain%>`, an app called `myapp` pushed with the following command would result in a route `myapp.<%=vars.app_domain%>` being created and mapped to the app (if the route has not already been created in another space).

<pre class="terminal">
$ cf push myapp
</pre>

To customize the route during `push`, specify the domain using the `-d` flag and the hostname with the `-n` flag. The following command creates a route for myapp `foo.<%=vars.private_app_domain%>`.

<pre class="terminal">
$ cf push myapp -d <%=vars.private_app_domain%> -n foo
</pre>

#### <a id='map-route-with-manifest'></a>Map Route Using Application Manifest ####

When you create or edit the manifest for an application, you can use the `host` and `domain` attributes to define the host and domain components of the application route, respectively. For more information, see [Application Manifests](../deploy-apps/manifest.html).

#### <a id='mapping-route-to-multiple-apps'></a>Mapping a Route to Multiple Apps ####

Cloud Foundry allows multiple apps, or versions of the same app, to be mapped to the same route. This enables Blue-Green deployment; see [Using Blue-Green Deployment to Reduce Downtime and Risk](./blue-green.html).

In other situations, routing multiple apps to the same route may cause undesirable behavior, as incoming requests are randomly routed to one of the apps on the shared route. See [Routing Conflicts](./troubleshoot-app-health.html#routing-conflict) for more information about troubleshooting this problem.

### <a id='unmap-route'></a>Unmap a Route ###

You can remove a route from an app using the `cf unmap-route` command. Unmapping a route leaves the route available in the targeted space for later use.

<pre class="terminal">
$ cf unmap-route myapp <%=vars.private_app_domain%> -n myapp
</pre>

### <a id='delete-route'></a>Delete a Route ###

You can delete a route from a space using the `cf delete-route` command:

<pre class="terminal">
$ cf delete-route <%=vars.private_app_domain%> -n myapp
</pre>


## <a id='domains'></a>Domains ##

Domains in Cloud Foundry provide a namespace from which to create routes, and the presence of a domain in Cloud Foundry indicates to a developer that requests for any route created from the domain will be routed to Cloud Foundry. This requires DNS to be configured out-of-band to resolve the domain name to the IP address of a load balancer configured to forward requests to the CF routers.

### <a id='list-domains'></a>List Domains for an Org ###

You can view available domains for the targeted organization using the `cf domains` command. In following example, there are two available domains: a system-wide shared domain `<%=vars.app_domain%>` and the private `<%=vars.private_app_domain%>` domain.

<pre class="terminal">
$ cf domains
Getting domains in org my-org as user@mydomain.com... OK

name           status
<%=vars.app_domain%>    shared
<%=vars.private_app_domain%>    owned
</pre>

### <a id='shared-domains'></a>Shared Domains ###

*Shared domains* are managed by the system admin and are available to users in all orgs. An admin can offer multiple shared domains to users, one of which is configured as the default.

Routes created for shared domains must use a hostname.

#### <a id='create-private-domain'></a>Create a Private Domain ####

Admins can create a shared domain with the `cf create-shared-domain` command:
<pre class="terminal">
$ cf create-shared-domain <%=vars.app_domain%>
</pre>

Example: CF admin John offers users the choice of creating routes for their apps from two domains by configuring CF with shared domains `<%=vars.app_domain%>` and `cf.some-company.com`. John configures the former to be the default. When developer Jane  pushes her app `awesome` to Cloud Foundry and doesn't specify a route, the route `awesome.<%=vars.app_domain%>` is created and mapped to her app automatically. Requests to `http://awesome.<%=vars.app_domain%>` would immediately be routed to Jane's app. If Jane would like her app to be accessible at `awesome.cf.some-company.com`, she can create this route and map it to her app.

#### <a id='delete-shared-domain'></a>Delete a Shared Domain ####

Admins can delete a domain from Cloud Foundry with the `cf delete-shared-domain` command:

<pre class="terminal">
$ cf delete-domain mydomain.com
</pre>

### <a id='private-domains'></a>Private Domains ###

*Private domains* (also known as *custom domains*) can be added by users with the OrgManager role and enable members of the org to create routes for privately registered domain names. Private domains can also be shared with other organizations, enabling users of those orgs to create routes from the domain.

#### <a id='create-private-domain'></a>Create a Private Domain ####

To create a private domain:
<pre class="terminal">
$ cf create-domain my-org <%=vars.private_app_domain%>
</pre>

To create a private domain for a subdomain:
<pre class="terminal">
$ cf create-domain my-org foo.<%=vars.private_app_domain%>
</pre>

#### <a id='sharing-private-domains'></a>Sharing a Private Domain with One or More Orgs ####

As an Org Manager, you can grant or revoke access to a private domain to other orgs. You must have Org Manager permissions for all associated orgs.

<pre class="terminal">
$ cf share-private-domain test-org <%=vars.private_app_domain%>

$ cf unshare-private-domain test-org <%=vars.private_app_domain%>
</pre>

#### <a id='delete-private-domain'></a>Delete a Private Domain ####

Org Managers can delete a domain from Cloud Foundry with the `cf delete-domain` command:

<pre class="terminal">
$ cf delete-domain <%=vars.private_app_domain%>
</pre>

### <a id='parent-child-domains'></a>Requirements for Parent and Child Domains ###

In the domain `myapp.<%=vars.app_domain%>`, `<%=vars.app_domain%>` is the parent domain of subdomain `myapp`.

- You can only create a private domain that is parent to a private subdomain.
- You can create a shared domain that is parent to either a shared or a private subdomain.

The domain `foo.myapp.<%=vars.app_domain%>` is the child subdomain of `myapp.<%=vars.app_domain%>`.

- You can create a private subdomain for a private parent domain only if the domains belong to the same org.
- You can create a private subdomain for a shared parent domain.
- You can only create a shared subdomain for a shared parent domain.
- You cannot create a shared subdomain for a private parent domain.

### <a id='domains-dns'></a>DNS for Domains ###

#### <a id='subdomain-dns'></a>Configuring DNS for a Subdomain of your Registered Domain ####

To use a subdomain of your registered domain name with applications on Cloud Foundry, configure the subdomain as CNAME record with your DNS provider, pointing at any shared domain offered in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>myapp</td>
		<td>myapp.<%=vars.app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether the trailing <code>.</code> is required.</td>
	</tr>
	<tr>
		<td>Wildcard CNAME</td>
		<td>*</td>
		<td>foo.myapp.<%=vars.app_domain%>.</td>
		<td>You can use the wildcard in the CNAME record to point all of your subdomains to your parent domain. Each separately configured subdomain has priority over the wildcard configuration. </td>
	</tr>
</table>

#### <a id='root-domain-dns'></a>Configuring DNS for Your Registered Root Domain ####

To use your *root domain* (also known as the *zone apex domain*, e.g. mydomain.com) for applications on Cloud Foundry you can either use custom DNS record types like ALIAS and ANAME, if your DNS provider offers them, or *subdomain redirection*.

If your DNS provider supports using an ALIAS or ANAME record, configure your root domain with your DNS provider to point at a shared domain in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>ALIAS or ANAME</td>
		<td>empty or @</td>
		<td><%=vars.private_app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether to use an empty or @ value for the Name entry.</td>
	</tr>
</table>

If your DNS provider does not support ANAME or ALIAS records you can use subdomain redirection, also known as *domain forwarding*, to redirect requests for your root domain to a subdomain configured as a CNAME.

<p class="note">
	<strong>Note</strong>: If you use domain forwarding, SSL requests to the root domain may fail if the SSL certificate only matches the subdomain.
</p>

Configure the root domain to point at a subdomain (e.g. www), and configure the subdomain as a CNAME record pointing at a shared domain in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>URL or Forward</td>
		<td><%=vars.private_app_domain%></td>
		<td>www.<%=vars.private_app_domain%></td>
		<td>This method results in a <code>301 permanent redirect</code> to the subdomain you configure.</td>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>www</td>
		<td>myapp.<%=vars.app_domain%></td>
		<td></td>
	</tr>
</table>
