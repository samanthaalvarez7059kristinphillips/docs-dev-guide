---
title: Creating Domains and Routes
---
_This page assumes you are using cf CLI v6._

This topic describes how to create and use domains and routes in Cloud Foundry.

<p class="note"><strong>Note</strong>: The term <strong>domain</strong> in this topic differs from its common use and is specific to Cloud Foundry.</p>

In Cloud Foundry, you create a domain according to the guidelines in this topic. Cloud Foundry uses these domains in routes to direct requests to applications. A **custom domain** refers to a third party registered domain that you own and can use with your applications in Cloud Foundry. <%=vars.domains_shared_domains%>

Domains are associated with orgs and are not directly bound to applications. Domains can be **shared** or **private**. Shared domains are registered to multiple orgs while private domains, or **owned** domains, are registered to one org. A Cloud Foundry instance defines a default shared domain that your application uses unless you specify a different domain.

A **route** is a path used to access an application online. Each route is directly bound to one or more applications in Cloud Foundry. A route is a URL composed of a domain and an optional host as a prefix. For example, "myappname" is the host and "<%=vars.app_domain%>" is the domain in the route "myappname.<%=vars.app_domain%>." Here "<%=vars.app_domain%>" could either be a custom domain of your own, or a domain that you have created through Cloud Foundry.

## <a id='root'></a>Using a Root Domain ##

A **root domain** or a **zone apex domain** such as "example.com" consists of a domain without a host. To access an application deployed to a root domain, you must use either custom record types or **subdomain redirection**.

The following section contains instructions for mapping a root domain to your application by configuring ALIAS or ANAME custom record types or by using subdomain redirection.

###<a id='root-dns'></a>Configuring an ALIAS or ANAME Record with Your DNS Provider ###

If your DNS provider supports using an ALIAS or ANAME record, configure your root domain with your DNS provider.

ALIAS and ANAME records follow the pattern shown below:

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>ALIAS or ANAME</td>
		<td>empty or @</td>
		<td>foo.example.com.</td>
		<td>Refer to your DNS provider documentation to determine whether to use an empty or @ value for the Name entry.</td>
	</tr>
</table>

If your DNS provider does not support ANAME or ALIAS records, use subdomain redirection, a technique also known as **domain forwarding**, to add a root domain. If you use this method, note that SSL requests to the root domain result in an error because the SSL certificate generally only matches the subdomain.

Configure the redirect from the root domain to the target "www" subdomain, and configure the "www" subdomain as a CNAME record reference to the target app URL. The table below illustrates this pattern.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>URL or Forward</td>
		<td>example.org</td>
		<td>www.example.org</td>
		<td>This method results in a <code>301 permanent redirect</code> to the subdomain you configure.</td>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>www</td>
		<td>foo.cfapps.io</td>
		<td></td>
	</tr>
</table>

###<a id='root-app'></a>Configuring Your Application to Use a Root Domain ###

The following section contains instructions for creating a domain and using that domain as the route for your application. Since the route is a root domain and does not have a host, both the domain and route in this section are represented with "example.org."

1. Create the domain in Cloud Foundry and associate it with an organization.

	The command below defines the domain "example.org" in the “test-org” organization:

	<pre class="terminal">
	$ cf create-domain test-org example.org
	</pre>

1. Map the route to your app. The command you use depends on whether the app uses a shared domain.

	If your route is not using a shared domain, use the `cf map-route` command as the example shows:

	<pre class="terminal">
	$ cf map-route myapp example.org
	</pre>

	If your route is using a shared domain, use the `-n HOSTNAME` parameter with the `cf map-route` command to specify a unique hostname for the route. The command below maps the route "myapp.example.org" with the hostname "app" to the application named "myapp":

	<pre class="terminal">
	$ cf map-route myapp example.org -n app
	</pre>

## <a id='parent'></a>Creating a Parent Domain ##

In the multi-level domain "myapp.<%=vars.app_domain%>," "<%=vars.app_domain%>" is the parent domain of subdomain “myapp.”

###<a id='parent-dns'></a>Configuring a CNAME Record with Your DNS Provider ###

Follow the [Configuring a CNAME Record with Your DNS Provider](#subdomain-dns) procedure in the Using a Private or Shared Subdomain section.

###<a id='parent-app'></a>Configuring Your Application to Use a Private or Shared Parent Domain ###

Parent domains must meet the following requirements:

* **Private Parent Domains**: You can only create a private domain that is parent to a private subdomain.

* **Shared Parent Domains**: You can create a shared domain that is parent to either a shared or a private subdomain.

## <a id='subdomain'></a>Using a Private or Shared Subdomain ##

Domains in Cloud Foundry can be multi-level and contain subdomains like the “myapp” in the domain "myapp.<%=vars.app_domain%>." In this case, "<%=vars.app_domain%>" is the parent domain of the subdomain “myapp.” In the domain "test.myapp.example.org," “test” is a subdomain with the parent domain "myapp.example.org."

###<a id='subdomain-dns'></a>Configuring a CNAME Record with Your DNS Provider ###

Configure your domain using a CNAME record.

CNAME records follow the pattern illustrated below:

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>test</td>
		<td>foo.<%=vars.app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether the trailing <code>.</code> is required.</td>
	</tr>
	<tr>
		<td>Wildcard CNAME</td>
		<td>sample</td>
		<td>*.<%=vars.app_domain%>.</td>
		<td>You can use the wildcard in the CNAME record to point all of your subdomains to your main domain. All subdomains will automatically redirect to your main domain. Each separately configured subdomain has priority over the wildcard configuration. </td>
	</tr>
</table>

###<a id='subdomain-app'></a>Configuring Your Application to Use a Private or Shared Subdomain ###

You can create a new domain by mapping subdomains to an existing domain. Each added subdomain is the child to its following parent domain. The subdomains must meet the following requirements:

* **Private Subdomains**:
	* You can map a private subdomain to a private parent domain only if the domains belong to the same org.
	* You can map a private subdomain to a shared parent domain.

* **Shared Subdomains**:
	* You can only map a shared subdomain to a shared parent domain.
	* You cannot map a shared subdomain to a private parent domain.

To configure your application to use a domain with a subdomain, create the domain and map the route to your application as follows:

1. Create the domain in Cloud Foundry and associate it with an org.

	The command below defines the domain "myapp.example.org" in the "test-org" organization:

	<pre class="terminal">
	$ cf create-domain test-org myapp.example.org
	</pre>

1. Map the route to your app with an optional hostname, as the example shows:

	<pre class="terminal">
	$ cf map-route myapp myapp.example.org -n test
	</pre>

## <a id='customize-route'></a>Managing Your Domains ##

### <a id='view-domains'></a>View Domains for an Org ###

You can view available domains for the targeted organization using the `cf domains` command.

In this example, there are two available domains: a system-wide default "<%=vars.app_domain%>" domain and the custom "example.org" domain.

<pre class="terminal">
$ cf domains
Getting domains in org console as user@example.org... OK

name           status
<%=vars.app_domain%>    shared
example.org    owned
</pre>

### <a id='assign-domains-hosts'></a>Assign Domains and Hosts ###

You can assign a domain and host to your application using either the command line or the application manifest.

#### <a id='assign-at-push'></a>Assign Using the cf CLI ####

When you run `cf push`, you can optionally assign a domain and host to the application.

- **Domain**: Use the `-d` flag to specify one of the domains available to the targeted org.
- **Host**: Use the `-n` flag to provide a string for the host.

The route Cloud Foundry creates for the application as a result of the following command is `myapp.example.org`.

<pre class="terminal">
$ cf push myapp -d example.org -n myapp
</pre>

#### <a id='assign-in-manifest'></a>Assign Using the Manifest ####

When you create or edit the manifest for an application, you can use the `host` and `domain` attributes to define the host and domain components of the application route, respectively. For more information, see [Application Manifests](../deploy-apps/manifest.html).

### <a id='delete-domains'></a>Delete a Domain ###

You can delete a domain from Cloud Foundry with the `cf delete-domain` command:

<pre class="terminal">
$ cf delete-domain example.org
</pre>

## <a id='customize-route'></a>Managing Your Routes ##

### <a id='list-routes'></a>List Routes ###

You can list routes for the current space with `cf routes` command. Note that the host is separate from the domain segment.

For example:

<pre class="terminal">
$ cf routes
Getting routes as user@example.org ...

host                     domain          apps
myapp                    example.org     myapp1
myapp2
1test                    <%=vars.app_domain%>     1test
sinatra-hello-world      <%=vars.app_domain%>     sinatra-hello-world
sinatra-to-do            <%=vars.app_domain%>     sinatra-to-do
</pre>

### <a id='create-route'></a>Create a Route ###

Create a route and associate it with a space for later use with the `cf create-route` command. You can use the optional `-n HOSTNAME` parameter to specify a unique hostname for each route that uses the same domain.

For example, this command creates the "myapp.example.org" route in the "development" space:

<pre class="terminal">
$ cf create-route development example.org -n myapp
</pre>

If you are an administrator, you can create a **wildcard route** by specifying a
host as `*`.
The star operator `*` signals a wildcard route to match any URL that uses your
domain, regardless of the host.

<p class="note"><strong>Note</strong>: You must surround the <code>*</code> with quotation marks when referencing it using the CLI.</p>

For example, the following command creates the wildcard route "*.example.org" in
the "development" space:

<pre class="terminal">
$ cf create-route development example.org -n "*"
</pre>

### <a id='map-route'></a>Assign or Change a Route ###

Assign or change the route for a particular application with the `cf map-route` command. Specifying the host is optional. If the route does not already exist, this command creates it and then maps it.

For example, the following command maps the route "myapp.example.org" to the "myapp" application:

<pre class="terminal">
$ cf map-route myapp example.org -n myapp
</pre>

An application bound to a wildcard route is a "fallback" app that a user accesses if no other application routes match what the user typed. For example, if a user types "myap.example.org" in an attempt to access the application bound to "myapp.example.org", the user accesses the application bound to "*.example.org."

The command below maps the route "*.example.org" to the "myfallbackapp" application:

<pre class="terminal">
$ cf map-route myfallbackapp example.org -n *
</pre>

<p class="note"><strong>Note</strong>: You can map a single route to multiple applications in the same space. See <a href="../deploy-apps/blue-green.html">Blue-Green Deployment</a> to learn about an important extension of this technique.</p>

If the application is running when you map a route, restart the application. The new route is not active until the application is restarted.

### <a id='delete-route'></a>Remove a Route ###

You can remove a route from an app using the `cf unmap-route` command. Unmapping a route leaves the route available in the targeted space for later use.

<pre class="terminal">
$ cf unmap-route myapp example.org -n myapp
</pre>

You can remove a route from a space using the `cf delete-route` command:

<pre class="terminal">
$ cf delete-route example.org -n myapp
</pre>

Note that for each of the above commands, using the `-n` parameter to specify the host is optional.