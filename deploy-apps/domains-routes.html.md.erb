---
title: Domains, Subdomains, and Routes
---
_This page assumes you are using cf v6._

This page has information about how to specify the route (or URL) that Cloud
Foundry uses to direct requests to an application.
A route is made up of a _subdomain_ (or host) and a _domain_ that you can
specify when you push an application.

## <a id='domains'></a>Domains and Routes in Cloud Foundry ##

A **domain** is a domain name like `<%=vars.app_domain%>`. Domains can also be multi-level
and contain sub-domains like the “store” in `store.example.com`. In Cloud Foundry, domains are associated with orgs. Domain objects are not directly bound to apps.

Cloud Foundry also supports custom domains. You can map a registered domain of your own to a space in Cloud Foundry.

A **route**, based on a domain with an optional host as a prefix, may be associated with
one or more applications. For example, `myapp` is the host and `<%=vars.app_domain%>` is the domain in the route `myapp.<%=vars.app_domain%>`. It is also possible to have a route that represents `<%=vars.app_domain%>` without a host. This type of route is
known as a zone apex domain or a root domain. Routes are children of domains and are
directly bound to apps in Cloud Foundry.

A Cloud Foundry instance defines a default shared domain.
Unless you specify a domain, `cf` uses the default shared domain in the route to
your application.

## <a id='create-domains'></a>Use Your Custom Domain in Cloud Foundry ##

There are three different models for using your own custom domain in Cloud Foundry:

 * Using a shared root domain, such as example.org.
 * Using a shared subdomain, such as myapp.example.org.
 * Using a shared domain plus a host to create a url, such as myapp.example.org

Select the procedure below that corresponds with the type of domain you want to use.

### <a id='root'></a>Map a Root Domain ###

Use a DNS ALIAS record to map a custom root domain to your app.

 1. Create the domain in Cloud Foundry and associate it with an organization.

    The command below defines the custom domain `example.org` in the
	"test-org" organization:

	<pre class="terminal">
	$ cf create-domain test-org example.org
	</pre>

 1. Map the route to your app:

    <pre class="terminal">
	$ cf map-route myapp example.org
	</pre>

 1. Configure your custom root domain with your DNS provider using an ALIAS record.

ALIAS records follow the pattern illustrated below:

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
	  <td>ALIAS</td>
	  <td>empty or @</td>
	  <td>yourappname.<%=vars.app_domain%>.</td>
	  <td>Refer to your DNS provider documentation to determine whether to use an empty or @ value for the Name entry.</td>
	</tr>
	</table>

### <a id='single-sub'></a>Map a Single Subdomain ###

Use a DNS CNAME record to alias a multi-level custom subdomain.

 1. Create the domain in Cloud Foundry and associate it with an organization.

    The command below defines the custom domain `test.example.org` in the
	"test-org" organization:

	<pre class="terminal">
	$ cf create-domain test-org test.example.org
	</pre>

 1. Map the route to your app:

    <pre class="terminal">
	$ cf map-route myapp test.example.org
	</pre>

 1. Configure your custom domain with your DNS provider using a CNAME record.

CNAME records follow the pattern illustrated below:

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
	  <td>CNAME</td>
	  <td>test</td>
	  <td>yourappname.<%=vars.app_domain%>.</td>
	  <td>Refer to your DNS provider documentation to determine whether the trailing `.` is required.</td>
	</tr>
	</table>

### <a id='multi-sub'></a>Map Multiple Subdomains ###

Use the `-n HOSTNAME` parameter with the `create-domain` command to specify a unique hostname for a route that uses a shared domain. Then use a DNS CNAME record to alias the custom subdomain.

 1. Create the domain in Cloud Foundry and associate it with an organization.

    The command below defines the custom domain `myapp.example.org` in the
	"test-org" organization:

	<pre class="terminal">
	$ cf create-domain test-org example.org -n myapp
	</pre>

 1. Map the route to your app:

    <pre class="terminal">
    $ cf map-route myapp example.org -n myapp
	</pre>

 1. Configure your custom domain with your DNS provider using a CNAME record.

	CNAME records follow the pattern illustrated below:

	<table border="1" class="nice" >
		<tr>
			<th>Record</th>
			<th>Name</th>
			<th>Target</th>
			<th>Note</th>
		</tr>
		<tr>
		  <td>CNAME</td>
		  <td>test</td>
		  <td>yourappname.<%=vars.app_domain%>.</td>
		  <td>Refer to your DNS provider documentation to determine whether the trailing `.` is required.</td>
		</tr>
		</table>

## <a id='view-domains'></a>View Domains for an Org ##

You can see available domains for the targeted organization using the `cf
domains` command.
In this example, there are two available domains: a system-wide default
`<%=vars.app_domain%>` domain and the custom `example.org` domain.

<pre class="terminal">
$ cf domains
Getting domains in org console as user@example.org... OK

name           status
<%=vars.app_domain%>    shared
example.org    owned
</pre>

## <a id='delete-domains'></a>Delete a Domain ##

You can delete a domain from Cloud Foundry with the `cf delete-domain` command:

<pre class="terminal">
$ cf delete-domain example.org
</pre>

## <a id='subdomain'></a>About Subdomains ##

In some cases, defining the subdomain portion of a route is optional. In
general, though, this segment of a route is required to ensure the route is
unique.
Note in particular that you _must_ define a subdomain in the following cases:

- If you assign the default domain defined for your Cloud Foundry instance.
- If you assign a custom domain to the application, and that domain is, or will be, assigned to other applications. In the case of a custom domain, a subdomain for it must be registered with your naming service along with the top-level domain.

You might choose not to assign a subdomain to an application that will not
accept browser requests, or if you are using a custom domain for a single
application only.

## <a id='assign-at-push'></a>Assign Domain and Subdomain at push ##

When you run `cf push`, you can optionally specify a domain and subdomain for
the application.

- Domain: Use the `-d` flag to specify one of the domains available to the targeted org.
- Subdomain: Use the `-n` flag to provide a string for the subdomain.

Example:

<pre class="terminal">
$ cf push myapp -d example.org -n myapp
</pre>

The route cf creates for the application as a result of this command is
`myapp.example.org`.

## <a id='assign-in-manifest'></a>Assign Subdomain in Manifest ##

If you create or edit the manifest for an application, you can use the `host`
(for subdomain) and `domain` attributes to define the components of the
application route.
For more information, see [Application Manifests](../deploy-apps/manifest.html).

## <a id='list-routes'></a>List Routes ##

You can list routes for the current space with `cf routes` command.
Note that the subdomain is shown as "host," separate from the domain segment.
For example:

<pre class="terminal">
$ cf routes
Getting routes as user@example.org ...

host                     domain          apps
myapp                    example.org     myapp1
                                         myapp2
1test                    <%=vars.app_domain%>     1test
sinatra-hello-world      <%=vars.app_domain%>     sinatra-hello-world
sinatra-to-do            <%=vars.app_domain%>     sinatra-to-do
</pre>

## <a id='define-route'></a>Define or Change a Route from the Command Line ##

### <a id='create-route'></a>Create a Route ###

Create a route and associate it with a space for later use with the `cf create-route` command.
You can use the optional `-n HOSTNAME` parameter to specify a unique hostname
for each route that uses the same domain.
For example, this command creates the `myapp.example.org` route in the
"development" space:

<pre class="terminal">
$ cf create-route development example.org -n myapp
</pre>

### <a id='map-route'></a>Assign a Route to an Application ###

Assign or change the route for a particular application with the `cf map-route`
command.
Specifying the subdomain is optional.
If the route does not already exist, this command creates it and then maps it.
For example, the following command maps the route `myapp.example.org` to the
"myapp" application:

<pre class="terminal">
$ cf map-route myapp example.org -n myapp
</pre>

**Note**: You can map a single route to multiple applications in the same space.
See [Blue-Green Deployment](../deploy-apps/blue-green.html) to learn about an
important extension of this technique.

If the application is running when you map a route, restart the application.
The new route is not active until the application is restarted.

## <a id='delete-route'></a>Remove a Route Using the Command Line ##
You can remove a route from an app using the `cf unmap-route` command.
Unmapping a route leaves the route available in the targeted space for later
use.

<pre class="terminal">
$ cf unmap-route myapp example.org -n myapp
</pre>

You can remove a route from a space using the `cf delete-route` command:

<pre class="terminal">
$ cf delete-route example.org -n myapp
</pre>

Note that for each of the above commands, using the `-n` parameter to specify
the subdomain is optional.