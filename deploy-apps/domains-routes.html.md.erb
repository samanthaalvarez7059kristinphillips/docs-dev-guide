---
title: Domains and Routes
---

<% $this_topic = 'domains-routes' %>

_This page assumes you are using cf CLI v6._

<p class="note">
	<strong>Note</strong>: The term "domain" in this topic differs from its common use and is specific to Cloud Foundry. Likewise, "shared domain" and "private domain" refer to resources with specific meaning in Cloud Foundry. The use of "domain name", "root domain", and "subdomain" refers to DNS records.
</p>


## <a id='routes'></a>Routes ##

HTTP requests are routed to applications pushed to Cloud Foundry by associating an application with a url, known as a route. This association is calling mapping, as in "app foo is mapped to route foo.example.com". Many apps can be mapped to a single route, resulting in requests for the route being load balanced across all instances of all mapped apps (useful for blue/green deploys). An individual app can also be mapped to multiple routes, enabling the app to be accessed via multiple urls.

Routes belong to a space, so that only apps in the same space can be mapped to a route. Routes are globally unique, so that member users of one space can not create a route with the same url as members of another space, no matter what orgs these spaces belong to.

### <a id='create-route'></a>Create a Route ###

Routes can be created and reserved for later; they don't need to be immediately mapped to an application and they will persist after being unmapped from an application.

Routes are based on a domain (a Cloud Foundry term; see [Domains](#domains) below) plus an optional hostname. Three kinds of routes can be created depending on the accompanying hostname.

#### Routes with Hostname ####

The most common type of route, as routes of this kind are created automatically when applications are pushed to Cloud Foundry. Given a default shared domain `<%=vars.app_domain%>`, an app called `myapp` pushed with the following command would result in a route `myapp.<%=vars.app_domain%>` being created and mapped to the app (if the route has not already been created in another space).

<pre class="terminal">
$ cf push myapp
</pre>

Only requests for `http://myapp.<%=vars.app_domain%>`, `https://myapp.<%=vars.app_domain%>`, or any path under those urls (e.g. `http://myapp.<%=vars.app_domain%>/bar`), will be routed to apps mapped to this route.

Routes can be created and added to an app afterward; see [Map a Route to your App](#map-route).

#### Routes without Hostname ####

This creates a route for the domain itself. This is permitted for [Private Domains](#private-domains) only.

<pre class="terminal">
$ cf create-route my-space example.com
</pre>

This creates a route in space `my-space` from domain `example.com` with no hostname. Assuming DNS has been configured correctly, Cloud Foundry will route requests for `http://example.com`, `https://example.com`, or any path under those urls (e.g. `http://example.com/foo`) to applications that are mapped to the route. If there are no other routes for the domain, requests to any subdomain (e.g. `http://foo.example.com`) will fail.

Domains can also be created in Cloud Foundry for subdomains of registered domain names (e.g. `foo.example.com`). Assuming DNS has been configured for this subdomain, a route created from this domain with no added host would result in requests for `http://foo.example.com`, `https://foo.example.com`, or any path under those urls (e.g. `http://foo.example.com/foo`) to be routed to applications mapped to the route.

#### Routes with Wildcard Hostname ####

When creating a route, an asterix can be submitted for the hostname. This is called a **wildcard route**.

<pre class="terminal">
$ cf create-route my-space example.com -n *
</pre>

An application mapped to a wildcard route is a "fallback" app that a user accesses if no other application routes match what the user typed. For example, if a user types "myap.mydomain.com" in an attempt to access the application bound to "myapp.mydomain.com", the user accesses the application bound to "*.mydomain.com."

The command below maps the route "*.mydomain.com" to the "myfallbackapp" application:


This hostname creates a wildcard route (e.g. `*.<%=vars.app_domain%>`, `*.foo.<%=vars.app_domain%>`). Requests that include the domain but do not match any other routes will be forwarded to apps mapped to this route.

	  Examples:

		- If routes have been created for both the root domain and wildcard, but no others, then a request for `http://foo.<%=vars.app_domain%>` would be forwarded to apps mapped to the wildcard route.
		-

For details on managing routes and domains, see [Creating Domains and Routes](./domains-routes.html). <%= vars.link_adminguide_domains %>

### <a id='map-route'></a>Map a Route to your App ###

If your route is not using a shared domain, use the `cf map-route` command as the example shows:

<pre class="terminal">
$ cf map-route myapp mydomain.com
</pre>

If your route is using a shared domain, use the `-n HOSTNAME` parameter with the `cf map-route` command to specify a unique hostname for the route. The command below does two things:

<ul>
	<li> Combines the existing route "myapp.mydomain.com" with the hostname "app" to produce the new route "app.myapp.mydomain.com"</li>
	<li> Maps the new route to the application named "myapp" </li>
  </ul>
<pre class="terminal">
$ cf map-route myapp mydomain.com -n app
</pre>

## <a id='domains'></a>Domains ##

Domains in Cloud Foundry provide a namespace from which to create routes, and the presence of a domain in Cloud Foundry indicates to a developer that requests for any route created from the domain will at least make it as far as the Cloud Foundry routing tier. This requires DNS to be configured out-of-band to resolve the domain name matching the domain to the IP address of a load balancer, and the load balancer to be configured to foward requests for the domain name to the IP addressess of the CF routers.

### <a id='list-domains'></a>List Domains for an Org ###

You can view available domains for the targeted organization using the `cf domains` command. In following example, there are two available domains: a system-wide shared domain "<%=vars.app_domain%>"  and the private "mydomain.com" domain.

<pre class="terminal">
$ cf domains
Getting domains in org my-org as user@mydomain.com... OK

name           status
<%=vars.app_domain%>    shared
mydomain.com    owned
</pre>

### <a id='shared-domains'></a>Shared Domains ###

*Shared domains* are managed by the system admin and are available to users in all orgs. An admin can offer multiple shared domains to users, one of which is configured as the default.

Routes for shared domains must use a hostname.

Example: CF admin John offers users the choice of creating routes for their apps from two domains by configuring CF with shared domains `<%=vars.app_domain%>` and `cf.some-company.com`. John configures the former to be the default. When developer Jane  pushes her app `awesome` to Cloud Foundry and doesn't specify a route, the route `awesome.<%=vars.app_domain%>` is created and mapped to her app automatically. Requests to `http://awesome.<%=vars.app_domain%>` would immediately be routed to Jane's app. If Jane would like her app to be accessible at `awesome.cf.some-company.com`, she can create this route and map it to her app.

### <a id='private-domains'></a>Private Domains ###

*Private domains* (also known as *custom domains*) can be added by users with the OrgManager role and enable members of the org to create routes for privately registered domain names. Private domains can also be shared with other organizations, enabling users of those orgs to create routes from the domain.

The load balancer in front of Cloud Foundry must be configured to forward requests for private domains. If you encounter issues, check with your Cloud Foundry operater.

#### <a id='create-private-domain'></a>Create a Private Domain ####

To create a domain for the root domain:
<pre class="terminal">
$ cf create-domain my-org mydomain.com
</pre>

To create a domain for a subdomain:
<pre class="terminal">
$ cf create-domain my-org foo.mydomain.com
</pre>

#### <a id='sharing-private-domains'></a>Sharing a Private Domain with One or More Orgs ####

As an Org Manager, you can grant or revoke access to a private domain to other orgs. You must have Org Manager permissions for all associated orgs.

<pre class="terminal">
$ cf share-private-domain test-org example.com

$ cf unshare-private-domain test-org example.com
</pre>

#### <a id='private-domains-dns'></a>DNS for Private Domains ####

To use a subdomain of your registered domain name with applications on Cloud Foundry, configure the subdomain as CNAME record with your DNS provider, pointing at any shared domain offered in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>myapp</td>
		<td><%=vars.app_domain%></td>
		<td></td>
	</tr>
</table>

To use your *root domain* (also known as the *zone apex domain*, e.g. mydomain.com) for applications on Cloud Foundry you can either use custom DNS record types like ALIAS and ANAME, if your DNS provider offers them, or *subdomain redirection*.

If your DNS provider supports using an ALIAS or ANAME record, configure your root domain with your DNS provider to point at a shared domain in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>ALIAS or ANAME</td>
		<td>empty or @</td>
		<td><%=vars.app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether to use an empty or @ value for the Name entry.</td>
	</tr>
</table>

If your DNS provider does not support ANAME or ALIAS records you can use subdomain redirection, also known as *domain forwarding*, to redirect requests for your root domain to a subdomain configured as a CNAME. If you use this method, note that SSL requests to the root domain may result in an error if the SSL certificate only matches the subdomain.

Configure the root domain to point at a subdomain (e.g. www), and configure the subdomain as a CNAME record pointing at a shared domain in Cloud Foundry.

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>URL or Forward</td>
		<td>mydomain.com</td>
		<td>www.mydomain.com</td>
		<td>This method results in a <code>301 permanent redirect</code> to the subdomain you configure.</td>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>www</td>
		<td><%=vars.app_domain%></td>
		<td></td>
	</tr>
</table>

#### <a id='private-domains-ssl'></a>SSL for Private Domains ####



## <a id='parent'></a>Creating a Parent Domain ##

In the multi-level domain "myapp.<%=vars.app_domain%>," "<%=vars.app_domain%>" is the parent domain of subdomain "myapp."

### <a id='parent-dns'></a>Configuring a CNAME Record with Your DNS Provider ###

Follow the [Configuring a CNAME Record with Your DNS Provider](#subdomain-dns) procedure in the Using a Private or Shared Subdomain section.

### <a id='parent-app'></a>Configuring Your Application to Use a Private or Shared Parent Domain ###

Parent domains must meet the following requirements:

* **Private Parent Domains**: You can only create a private domain that is parent to a private subdomain.

* **Shared Parent Domains**: You can create a shared domain that is parent to either a shared or a private subdomain.


## <a id='subdomain'></a>Using a Private or Shared Subdomain ##

Domains in Cloud Foundry can be multi-level and contain subdomains like the "myapp" in the domain "myapp.<%=vars.app_domain%>." In this case, "<%=vars.app_domain%>" is the parent domain of the subdomain "myapp." In the domain "test.myapp.mydomain.com," "test" is a subdomain with the parent domain "myapp.mydomain.com."

### <a id='subdomain-dns'></a>Configuring a CNAME Record with Your DNS Provider ###

Configure your domain using a CNAME record.

CNAME records follow the pattern illustrated below:

<table border="1" class="nice" >
	<tr>
		<th>Record</th>
		<th>Name</th>
		<th>Target</th>
		<th>Note</th>
	</tr>
	<tr>
		<td>CNAME</td>
		<td>test</td>
		<td>foo.<%=vars.app_domain%>.</td>
		<td>Refer to your DNS provider documentation to determine whether the trailing <code>.</code> is required.</td>
	</tr>
	<tr>
		<td>Wildcard CNAME</td>
		<td>sample</td>
		<td>*.<%=vars.app_domain%>.</td>
		<td>You can use the wildcard in the CNAME record to point all of your subdomains to your parent domain. Each separately configured subdomain has priority over the wildcard configuration. </td>
	</tr>
</table>

### <a id='subdomain-app'></a>Configuring Your Application to Use a Private or Shared Subdomain ###

You can create a new domain by mapping subdomains to an existing domain. Each added subdomain is the child to its following parent domain. The subdomains must meet the following requirements:

* **Private Subdomains**:
	* You can map a private subdomain to a private parent domain only if the domains belong to the same org.
	* You can map a private subdomain to a shared parent domain.

* **Shared Subdomains**:
	* You can only map a shared subdomain to a shared parent domain.
	* You cannot map a shared subdomain to a private parent domain.

To configure your application to use a domain with a subdomain, create the domain and map the route to your application as follows:

1. Create the domain in Cloud Foundry and associate it with an org.

	The command below defines the domain "myapp.mydomain.com" in the "test-org" organization:

	<pre class="terminal">
	$ cf create-domain test-org myapp.mydomain.com
	</pre>

1. Map the route to your app with an optional hostname, as the example shows:

	<pre class="terminal">
	$ cf map-route myapp myapp.mydomain.com -n test
	</pre>

## <a id='customize-route'></a>Managing Your Domains ##


### <a id='assign-domains-hosts'></a>Assign Domains and Hosts ###

You can assign a domain and host to your application using either the command line or the application manifest.

#### <a id='assign-at-push'></a>Assign Using the cf CLI ####

When you run `cf push`, you can optionally assign a domain and host to the application.

- **Domain**: Use the `-d` flag to specify one of the domains available to the targeted org.
- **Host**: Use the `-n` flag to provide a string for the host.

The route Cloud Foundry creates for the application as a result of the following command is `myapp.mydomain.com`.

<pre class="terminal">
$ cf push myapp -d mydomain.com -n myapp
</pre>

#### <a id='assign-in-manifest'></a>Assign Using the Manifest ####

When you create or edit the manifest for an application, you can use the `host` and `domain` attributes to define the host and domain components of the application route, respectively. For more information, see [Application Manifests](../deploy-apps/manifest.html).

### <a id='delete-domains'></a>Delete a Domain ###

You can delete a domain from Cloud Foundry with the `cf delete-domain` command:

<pre class="terminal">
$ cf delete-domain mydomain.com
</pre>

## <a id='customize-route'></a>Managing Your Routes ##

### <a id='list-routes'></a>List Routes ###

You can list routes for the current space with `cf routes` command. Note that the host is separate from the domain segment.

For example:

<pre class="terminal">
$ cf routes
Getting routes as user@mydomain.com ...

host                     domain          apps
myapp                    mydomain.com     myapp1
myapp2
1test                    <%=vars.app_domain%>     1test
sinatra-hello-world      <%=vars.app_domain%>     sinatra-hello-world
sinatra-to-do            <%=vars.app_domain%>     sinatra-to-do
</pre>

### <a id='create-route'></a>Create a Route ###

Create a route and associate it with a space for later use with the `cf create-route` command. You can use the optional `-n HOSTNAME` parameter to specify a unique hostname for each route that uses the same domain.

For example, this command creates the "myapp.mydomain.com" route in the "development" space:

<pre class="terminal">
$ cf create-route development mydomain.com -n myapp
</pre>

### <a id='map-route'></a>Assign or Change a Route ###

Assign or change the route for a particular application with the `cf map-route` command. Specifying the host is optional. If the route does not already exist, this command creates it and then maps it.

For example, the following command maps the route "myapp.mydomain.com" to the "myapp" application:

<pre class="terminal">
$ cf map-route myapp mydomain.com -n myapp
</pre>



If the application is running when you map a route, restart the application. The new route is not active until the application is restarted.

### <a id='apps-sharing-route'></a>Sharing a Route between Two Apps ###

<%= partial 'routing_conflict' %>

### <a id='delete-route'></a>Remove a Route ###

You can remove a route from an app using the `cf unmap-route` command. Unmapping a route leaves the route available in the targeted space for later use.

<pre class="terminal">
$ cf unmap-route myapp mydomain.com -n myapp
</pre>

You can remove a route from a space using the `cf delete-route` command:

<pre class="terminal">
$ cf delete-route mydomain.com -n myapp
</pre>

Note that for each of the above commands, using the `-n` parameter to specify the host is optional.
