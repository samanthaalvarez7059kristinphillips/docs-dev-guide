---
title: Using Application Health Checks
owner:
  - CAPI
  - CLI
---

<strong><%= modified_date %></strong>

## <a id="about_health_checks"></a> Overview

An application health check is a monitoring process that continually checks the status of a running Cloud Foundry app.

When deploying an app, a developer can configure the health check type and a timeout for starting the app. Valid health check types are `port`, `process`, and `http`. For type `http`, the developer can also configure an endpoint for the application health check.

Application health checks function as part of the app lifecycle managed by [Diego architecture](../../concepts/diego/diego-architecture.html).

### <a id="health_checks_work"></a>How Application Health Checks Work

The following table describes how application health checks work in Cloud Foundry.

<table>
	<tr>
		<th>Stage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Application developer deploys an app to Cloud Foundry.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>When deploying the app, the developer specifies a health check type for the app and, optionally, a timeout. If the developer does not specify a health check type, then the monitoring process defaults to a <code>port</code> health check.
		</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Cloud Controller stages, starts, and runs the app.
		</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Based on the type specified for the app, Cloud Controller configures a health check that runs periodically for each app instance.
		</td>
	</tr>
	<tr>
		<td>5</td>
		<td>When Diego starts an app instance, the application health check runs every 2 seconds until a response indicates that the app instance is healthy or until the health check timeout elapses. The 2-second health check interval is not configurable.
		</td>

	</tr>
	<tr>
	   <td>6</td>
		<td>When an app instance becomes healthy, its route is advertised, if applicable. Subsequent health checks are run every 30 seconds once the app becomes healthy. The 30-second health check interval is not configurable.
		</td>
        </tr>
	<tr>
		<td>7</td>
		<td>If a previously healthy app instance fails a health check, Diego considers that particular instance to be unhealthy. As a result, Diego stops and deletes the app instance, then reschedules a new app instance. This stoppage and deletion of the app instance is reported back to the Cloud Controller as a crash event.</td>
	</tr>
	<tr>
	   <td>8</td>
		<td>When an app instance crashes, Diego immediately attempts to restart the app instance several times. After three failed restarts, Cloud Foundry waits 30 seconds before attempting another restart. The wait time doubles each restart until the ninth restart, and remains at that duration until the 200th restart. After the 200th restart, Cloud Foundry stops trying to restart the app instance.</td>
	</tr>
</table>

## <a id="health_check_configuration"></a>Application Health Check Configuration

This section provides information on the configuration of application health checks.

### <a id="types"></a> Health Check Types

The following table describes the types of health checks available for apps and recommended circumstances in which to use them:

<table>
<tr>
<th>If your app:</th>
<th>Then use this type of health check:</th>
</tr>
<tr>
<td>Can provide an <code>HTTP 200</code> response</td>
<td><code>http</code>: The <code>http</code> health check performs a GET request to the configured http endpoint. When the health check receives an <code>HTTP 200</code> response, the app is declared healthy. We recommend using the <code>http</code> health check type whenever possible. A healthy HTTP response ensures that the web app is ready to serve HTTP requests. The configured endpoint must respond within 1 second to be considered healthy.</td>
</tr>
<tr>
<td>Can receive TCP connections (including HTTP web applications)
</td>
<td>
<code>port</code>: A health check makes a TCP connection to the port or ports configured for the app. For applications with multiple ports, a health check monitors each port. If you do not specify a health check type for your app, then the monitoring process defaults to a <code>port</code> health check. The TCP connection must be established within 1 second to be considered healthy.
</td>
</tr>
<tr>
<td>Does not support TCP connections (for example, a worker)</td>
<td><code>process</code>: For a <code>process</code> health check, Diego ensures that any process declared for the app stays running. If the process exits, Diego stops and deletes the app instance.</td>
</tr>
</table>

### <a id="health_check_timeout"></a> Health Check Timeouts

The value configured for the health check timeout is the amount of time allowed to elapse between starting up an app and the first healthy response from the app. If the health check does not receive a healthy response within the configured timeout, then the app is declared unhealthy.

<%=vars.app_healthcheck_timeout%>

### <a id="health_check_uri"></a> Health Check HTTP Endpoints

Only used by `http` type, this configuration specifies the path portion of a URI that must be served by the app and return `HTTP 200` when the app is healthy.

## <a id="setting_health_checks"></a> How to Configure the Health Check for Your Application

Use the [Cloud Controller API](https://apidocs.cloudfoundry.org/251/apps/creating_an_app.html) to configure a health check type, application start timeout, and HTTP endpoint for your app. 

Use the cf CLI [cf push](http://cli.cloudfoundry.org/en-US/cf/push.html) command to configure the health check type while creating or updating an application, or [cf set-health-check](http://cli.cloudfoundry.org/en-US/cf/set-health-check.html) to configure an existing application.
With `cf push`, use command line options `-u` to set the health check type and `-t` to configure the timeout. Alternatively, you can specify the type in the `health-check-type` field of your [application manifest](./manifest.html#health-check-type) file, and in case of the <code>http</code> health check type, the endpoint in the `health-check-http-endpoint` field.

You can change the health check configuration of a deployed app, but you must restart the app for the changes to take effect.
