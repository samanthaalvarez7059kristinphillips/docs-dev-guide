---
title: Using Application Health Checks
owner:
  - CAPI
  - CLI
---

<strong><%= modified_date %></strong>

This topic describes how to configure health checks for your applications in Cloud Foundry.

## <a id="about_health_checks"></a> Overview

An application health check is a monitoring process that continually checks the status of a running Cloud Foundry app.

Developers can configure a health check for an application using the Cloud Foundry Command Line Interface (cf CLI) or by specifying the `health-check-http-endpoint` and `health-check-type` fields in an application manifest. 

To configure a health check using the cf CLI, follow the instructions in the [Configure Health Checks](#setting_health_checks) section below. For more information about using an application manifest to configure a health check, see the [health-check-http-endpoint](manifest.html#health-check-http-endpoint) and [health-check-type](manifest.html#health-check-type) sections of the <em>Deploying with Application Manifest</em> topic.

Application health checks function as part of the app lifecycle managed by [Diego architecture](../../concepts/diego/diego-architecture.html).

## <a id="setting_health_checks"></a> Configure Health Checks

To configure a health check while creating or updating an application, use the [cf push](http://cli.cloudfoundry.org/en-US/cf/push.html) command:

<pre class="terminal">
$ cf push YOUR-APP -u HEALTH-CHECK-TYPE -t HEALTH-CHECK-TIMEOUT
</pre>

Replace the placeholders in the example command above as follows:

* `HEALTH-CHECK-TYPE`: Valid health check types are `port`, `process`, and `http`. See the [Health Check Types](#types) section below for more information.
* `HEALTH-CHECK-TIMEOUT`: The timeout is the amount of time allowed to elapse between starting up an application and the first healthy response. See the [Health Check Timeouts](#health_check_timeout) section for more information.

<p class="note"><strong>Note</strong>: The health check configuration you provide with <code>cf push</code> overrides any configuration in the application manifest.</p>

To configure a health check for an existing application or to add a custom HTTP endpoint, use the [cf set-health-check](http://cli.cloudfoundry.org/en-US/cf/set-health-check.html) command:

<pre class="terminal">
$ cf set-health-check YOUR-APP HEALTH-CHECK-TYPE --endpoint CUSTOM-HTTP-ENDPOINT
</pre>

Replace the placeholders in the example command above as follows:

* `HEALTH-CHECK-TYPE`: Valid health check types are `port`, `process`, and `http`. See the [Health Check Types](#types) section below for more information.
* `CUSTOM-HTTP-ENDPOINT`: A `http` health check defaults to using `/` as its endpoint, but you can specify a custom endpoint. See the [Health Check HTTP Endpoints](#health_check_uri) section below for more information.

<p class="note"><strong>Note</strong>: You can change the health check configuration of a deployed app with <code>cf set-health-check</code>, but you must restart the app for the changes to take effect.</p>

<p class="note"><strong>Note</strong>: You can also use the <code>v3-set-health-check</code> CLI command to change the individual health check invocation timeout for an app. This option also requires restarting the app. See the <a href="https://docs.cloudfoundry.org/cf-cli/cf-help.html#apps-(experimental)">Cloud Foundry CLI Reference Guide</a> for more information.</p>

##<a id='understand-healthchecks'></a> Understand Health Checks

###<a id='healthcheck-lifecycle'></a> Health Check Lifecycle

The following table describes how application health checks work in Cloud Foundry.

<table>
	<tr>
		<th>Stage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>1</td>
		<td>Application developer deploys an app to Cloud Foundry.</td>
	</tr>
	<tr>
		<td>2</td>
		<td>When deploying the app, the developer specifies a health check type for the app and, optionally, a timeout. If the developer does not specify a health check type, then the monitoring process defaults to a <code>port</code> health check.
		</td>
	</tr>
	<tr>
		<td>3</td>
		<td>Cloud Controller stages, starts, and runs the app.
		</td>
	</tr>
	<tr>
		<td>4</td>
		<td>Based on the type specified for the app, Cloud Controller configures a health check that runs periodically for each app instance.
		</td>
	</tr>
	<tr>
		<td>5</td>
		<td>When Diego starts an app instance, the application health check runs every 2 seconds until a response indicates that the app instance is healthy or until the health check timeout elapses. The 2-second health check interval is not configurable.
		</td>

	</tr>
	<tr>
	   <td>6</td>
		<td>When an app instance becomes healthy, its route is advertised, if applicable. Subsequent health checks are run every 30 seconds once the app becomes healthy. The 30-second health check interval is not configurable.
		</td>
        </tr>
	<tr>
		<td>7</td>
		<td>If a previously healthy app instance fails a health check, Diego considers that particular instance to be unhealthy. As a result, Diego stops and deletes the app instance, then reschedules a new app instance. This stoppage and deletion of the app instance is reported back to the Cloud Controller as a crash event.</td>
	</tr>
	<tr>
	   <td>8</td>
		<td>When an app instance crashes, Diego immediately attempts to restart the app instance several times. After three failed restarts, Cloud Foundry waits 30 seconds before attempting another restart. The wait time doubles each restart until the ninth restart, and remains at that duration until the 200th restart. After the 200th restart, Cloud Foundry stops trying to restart the app instance.</td>
	</tr>
</table>

### <a id="types"></a> Health Check Types

The following table describes the types of health checks available for applications and recommended circumstances in which to use them:

<table>
<tr>
<th>Health Check Type</th>
<th>Recommended Use Case</th>
<th>Explanation</th>
</tr>
<tr>
<td><code>http</code></td>
<td>The app can provide an <code>HTTP 200</code> response.</td>
<td>The <code>http</code> health check performs a GET request to the configured HTTP endpoint on the app's default port. When the health check receives an <code>HTTP 200</code> response, the app is declared healthy. We recommend using the <code>http</code> health check type whenever possible. A healthy HTTP response ensures that the web app is ready to serve HTTP requests. The configured endpoint must respond within 1 second to be considered healthy.</td>
</tr>
<tr>
<td><code>port</code></td>
<td>The app can receive TCP connections (including HTTP web applications).</td>
<td>A health check makes a TCP connection to the port or ports configured for the app. For applications with multiple ports, a health check monitors each port. If you do not specify a health check type for your app, then the monitoring process defaults to a <code>port</code> health check. The TCP connection must be established within 1 second to be considered healthy.
</td>
</tr>
<tr>
<td><code>process</code></td>
<td>The app does not support TCP connections (for example, a worker).</td>
<td> For a <code>process</code> health check, Diego ensures that any process declared for the app stays running. If the process exits, Diego stops and deletes the app instance.</td>
</tr>
</table>

### <a id="health_check_timeout"></a> Health Check Timeouts

The value configured for the health check timeout is the amount of time allowed to elapse between starting up an app and the first healthy response from the app. If the health check does not receive a healthy response within the configured timeout, then the app is declared unhealthy.

<%=vars.app_healthcheck_timeout%>

### <a id="health_check_uri"></a> Health Check HTTP Endpoints

Only used by `http` type, the `--endpoint` flag of the `cf set-health-check` command specifies the path portion of a URI that must be served by the app and return `HTTP 200` when the app is healthy.

<p class="note"><strong>Note</strong>: This command will only check the health of the default port of the app.</p>

<p class="note"><strong>Note</strong>: For HTTP apps, we recommend setting the health check type to <code>http</code> instead of a simple port check.</p>
