---
title: Deploying with Application Manifests
---

_This page assumes that you are using cf v6._

Application manifests tell `cf push` what to do with applications. This includes everything from how many instances to create and how much memory to allocate to what services applications should use.

Whether a manifest is useful depends on what you want to accomplish. For example, a manifest can help you automate deployment, especially of multiple applications at once. In any scenario, a manifest can spare you from typing the same command-line options over and over.

## <a id='find-manifest'></a>How cf push Finds the Manifest ##


The `cf push` command looks for the `manifest.yml` file in the current working directory unless you use the `-f` option to provide a non-standard manifest location or filename.

A plain `cf push` command finds the manifest when it is named manifest.yml and located in the current working directory.

~~~
$ cf push
Using manifest file <path to working directory>/manifest.yml
~~~


With the `-f` option, a path with no filename means that the filename must be `manifest.yml`.

~~~
$ cf push -f ./some_directory/some_other_directory/
Using manifest file <path to working directory>/some_directory/some_other_directory/manifest.yml
~~~

If the manifest is named something other than `manifest.yml`, use the `-f` option with both path _and_ filename.

~~~
$ cf push -f ./some_directory/some_other_directory/alternative_manifest.yml
Using manifest file <path to working directory>/some_directory/some_other_directory/alternative_manifest.yml
~~~

## <a id='minimal-manifest'></a>A Minimal Manifest ##

You can deploy applications without ever using a manifest. But, creating a manifest offers consistency and reproducibility.

Manifests are written in YAML. The illustration below shows a typical manifest for a minimal application.

 <%= image_tag("minimal_manifest_v6_edit1.png") %>

The directory that contains the bits you want to push is a good place to put your manifest and to run `cf push`, because `cf` looks for a manifest in the current working directory.

## <a id='find-app'></a>How cf push Finds the Application ##

By default, `cf` recursively pushes the contents of the current working directory. Alternatively, you can provide a path using either a manifest or a command-line option.

- If the path is to a directory, `cf` recursively pushes the contents of that directory instead of the current working directory.
- If the path is to a file, `cf` pushes only that file.

**Note:** If you want to push more than a single file, but not the entire contents of a directory, consider using a `.cfignore` file to tell `cf push` what to exclude.

## <a id='precedence'></a>Precedence Between Manifests, Command-line Options, and Existing Values ##

You can set application attributes using either a manifest or `cf push` command-line options. When you push an application for the first time, `cf` applies default values to attributes that you do not set. On subsequent pushes, you can use command-line options, or manifests, or both.

Between one push and another, attribute values can change in other ways. For example, the `cf scale` command changes the number of instances. The attribute values right before you push represent the cumulative result of defaults, manifest settings, and command-line options, applied up to that point. You can think of them as the values that exist at that moment, or just existing values.

Whenever you push an application, `cf` follows rules of precedence when setting attribute values:

* Manifests override existing values.
* Command-line options override manifests.

Think of manifests as just another input to `cf push`, to be combined with command-line options and existing values.

## <a id='optional-attributes'></a>Optional Attributes ##

This section explains how to describe optional application attributes in manifests. Each of these attributes can also be specified by a command-line option. Command-line options override the manifest, except in the case of the `path` attribute, as explained [below](#path).

### <a id='buildpack'></a>The buildpack attribute

If your application requires a custom buildpack, you can use the `buildpack` attribute to specify its URL or name:

~~~
buildpack: <buildpack_URL>
~~~

**Note:** The `cf buildpacks` command lists the buildpacks that you can refer to by name in a manifest or a command-line option.

The command-line option that overrides this attribute is `-p`.

### <a id='start-commands'></a>The command attribute ###

You can use the `command` attribute to set a custom start command for your application.

For example:

~~~
command: bundle exec rake VERBOSE=true
~~~

For some types of application, you must provide a custom start command, either from the command line or from the manifest. This is true of node.js applications, for example.

The command-line option that overrides this attribute is `-c`.

### <a id='domain'></a>The domain attribute ###

Every `cf push` deploys applications to one particular Cloud Foundry instance. Every Cloud Foundry instance has its own default domain. When you do not specify a domain, `cf` incorporates the default domain in the route to your application.

You can use the `domain` attribute when you want your application to be served from a domain other than the default.

~~~
domain: unique-example.com
~~~

The command-line option that overrides this attribute is `-d`.

### <a id='no-route'></a>The no-route attribute ###

By default, `cf push` assigns a route to every application. Sometimes this is inappropriate. For instance, applications which process data while running in the background, bound only to services, should not be assigned routes.

You can use the `no-route` attribute with a value of `true` to prevent a route from being created for your application.

~~~
no-route: true
~~~

The command-line option that corresponds to this attribute is ``--no-route``.

For more about these situations, see [Describing Multiple Applications with One Manifest] (#multi-apps) below.

### <a id = 'path'></a>The path attribute

You can use the `path` attribute to tell `cf` where to find your application. This is generally not necessary when you run `cf push` from the directory where an application is located.

~~~
path: <path_to_application_bits>
~~~

If you provide a path, it is a good idea to use either a command-line option or a manifest. Using both together is technically possible but makes it difficult to ascertain what the resulting path will be.

The command-line option that you can use instead of this attribute is `-p`.

### <a id='env-block'></a>Environment variables ###

The `env` block consists of a heading, then one or more environment variable/value pairs.

For example:

~~~
env:
  RAILS_ENV: production
  RACK_ENV: production
~~~

`cf push` deploys the application to a container on the server. The variables belong to the container environment.

While the application is running, `cf` allows you to operate on environment variables.

* View all variables:

 `cf env <app>`
* Set an individual variable:

 `cf set-env <variable_name> <variable_value>`
* Unset an individual variable:

 `cf unset-env <variable_name> <variable_value>`

Environment variables interact with manifests by somewhat complicated rules:

* When you deploy an application for the first time, `cf` reads the variables described in the environment block of the manifest, and adds them to the environment of the container where the application is deployed.

* When you stop and then restart an application, its environment variables persist.

### <a id='services-block'></a>Services ###

Applications can bind to services such as databases, messaging, and key-value stores.

Applications are deployed into App Spaces. An application can only bind to services that exist in the target App Space before the application is deployed.

The `services` block consists of a heading, then one or more service instance names.

Whoever creates the service chooses the service instance names. These names can convey logical information, as in `backend_queue`, describe the nature of the service, as in `mysql_5.x`, or do neither, as in the example below.

~~~
 services:
 - instance_ABC
 - instance_XYZ
~~~

## <a id='multi-apps'></a>Describing Multiple Applications with One Manifest ##

You can deploy multiple applications with one `cf push` command by describing them in a single manifest. In doing so, you need to pay extra attention to directory structure and path lines in the manifest.

Suppose you want to deploy two applications called respectively spark and flame, and you want `cf` to create and start spark before flame. You accomplish this by listing spark first in the manifest.

In this situation there are two sets of bits you want to push. Let’s say that they are `spark.rb` in the spark directory and `flame.rb` in the flame directory. One level up, the fireplace directory contains the spark and the flame directories along with the `manifest.yml` file. Your plan is to run `cf` from fireplace, where you know it can find the manifest.

Now that you have changed the directory structure and manifest location, `cf push` can no longer find your applications by its default behavior of looking in the current working directory. How can you ensure that `cf` finds the bits you want to push?

The answer is to add a path line to each application description to lead `cf` to the correct bits. Assume that `cf` is run from the `fireplace` directory.

For `spark`:

~~~
path: ./spark/
~~~

For `flame`:

~~~
path: ./flame/
~~~

The manifest now consists of two applications blocks.

~~~
---
# this manifest deploys two applications
# apps are in flame and spark directories
# flame and spark are in fireplace
# cf push should be run from fireplace
applications:
- name: spark
  memory: 1G
  instances: 2
  host: flint-99
  domain: <%=vars.app_domain%>
  path: ./spark/
  services:
  - mysql-flint-99
- name: flame
  memory: 1G
  instances: 2
  host: burnin-77
  domain: <%=vars.app_domain%>
  path: ./flame/
  services:
  - redis-burnin-77
~~~

To deploy applications that provide background services to other applications, use a multiple-application manifest with a `no-route` line in each background application description.

Anytime you have a multiple-application manifest, describe your applications completely in the manifest rather than using any command-line options with `cf push`. Otherwise, questions of precedence between the manifest and command-line options tend to become prohibitively complex.


## <a id='minimize-duplication'></a>Minimizing Duplication ##

In manifests where multiple applications share settings or services, you begin to see content duplicated. While the manifests still work, duplication increases the risk of typographical errors which cause deployment to fail.

The cure for this problem is to “promote” the duplicate content—that is, to move it up above the applications block, where it need appear only once. The promoted content applies to all applications described in the manifest. Note that content _in_ the applications block overrides content _above_ the applications block, if the two conflict.

The manifest becomes shorter, more readable, and more maintainable.

Notice how much content in the manifest below has been promoted in this way.

~~~
---
# all applications use these settings and services
domain: <%=vars.app_domain%>
memory: 1G
instances: 1
services:
- clockwork-mysql
applications:
- name: springtock
  host: tock09876
  path: ./spring-music/build/libs/spring-music.war
- name: springtick
  subdomain: tick09875
  path: ./spring-music/build/libs/spring-music.war
~~~

In the next section we carry this principle further by distributing content across multiple manifests.

## <a id='multi-manifests'></a>Multiple Manifests with Inheritance ##

A single manifest can describe multiple applications. Another powerful technique is to create multiple manifests with inheritance. Here, manifests have parent-child relationships such that children inherit descriptions from a parent. Children can use inherited descriptions as-is, extend them, or override them.

Content in the child manifest overrides content in the parent manifest, if the two conflict.

This technique helps in these and other scenarios:

* An application has a set of different deployment modes, such as debug, local, and public. Each deployment mode is described in child manifests that extend the settings in a base parent manifest.

* An application is packaged with a basic configuration described by a parent manifest. Users can extend the basic configuration by creating child manifests that add new properties or override those in the parent manifest.

The benefits of multiple manifests with inheritance are similar to those of minimizing duplicated content within single manifests. With inheritance, though, we “promote” content by placing it in the parent manifest.

Every child manifest must contain an “inherit” line that points to the parent manifest. Place the inherit line immediately after the three dashes at the top of the child manifest. For example, every child of a parent manifest called `base-manifest.yml` begins like this:

~~~
---
inherit: base-manifest.yml
~~~

You do not need to add anything to the parent manifest.

In the simple example below, a parent manifest gives each application minimal resources, while a production child manifest scales them up.

**simple-base-manifest.yml**

~~~
---
path: .
domain: <%=vars.app_domain%>
memory: 256M
instances: 1
services:
- singular-backend

# app-specific configuration
applications:
 - name: springtock
   host: 765shower
   path: ./april/build/libs/april-weather.war
 - name: wintertick
   subdomain: 321flurry
   path: ./december/target/december-weather.war
~~~

**simple-prod-manifest.yml**

~~~
---
inherit: simple-base-manifest.yml
applications:
 - name:springstorm
   memory: 512M
   instances: 1
   host: 765deluge
   path: ./april/build/libs/april-weather.war
 - name: winterblast
   memory: 1G
   instances: 2
   host: 321blizzard
   path: ./december/target/december-weather.war
~~~

Powerful as it is, inheritance can increase the potential for confusion. It’s a good idea to add comments which explain precisely how the child manifest extends or overrides the descriptions in the parent manifest.



