---
title: Deploying with Application Manifests
---

_This page assumes that you are using cf v5._

Application manifests tell `cf` what to do with applications. This includes everything from how many instances to create and how much memory to allocate to what services applications should use.

Whether or not you need a manifest depends on what you want to accomplish. For example, you must have a manifest in order to automate deployment. In simpler scenarios, a manifest may be helpful but not required.

## <a id='find-manifest'></a>How cf push finds the manifest ##


The `cf push` command looks for the `manifest.yml` file in the current working directory first. If `cf` finds no manifest there, it looks one directory higher, and continues in this way until it finds a manifest, or reaches the root of the filesystem, or is stopped from looking higher because of permissions.

Unless your setup is unusual, a plain `cf push` command should find the manifest.

~~~
$ cf push
Using manifest file manifest.yml
~~~

You can give `cf` a non-standard manifest location and/or filename with the ``-m`` option.

~~~
cf push -m <path-to-manifest>
~~~

With the `-m` option, the path to the manifest must include the manifest filename, whether that is `manifest.yml` or anything else.


## <a id='minimal-manifest'></a>A Minimal Manifest  ##

You can deploy some (but not all) applications without ever using a manifest, and `cf` allows you to create a manifest on the fly while deploying. On the other hand, creating the manifest before you deploy offers greater consistency and reproducibility than other methods.

Manifests are written in YAML. A typical manifest for a minimal application contains exactly the same information that would be produced by the interactive prompt method.

 <%= image_tag("minimal_manifest.png") %>

The directory that contains the bits you want to push is a good place to put your manifest and to run `cf push`, because `cf` looks for a manifest in the current working directory.

## <a id='find-app'></a>How cf push finds the application ##

The manifest tells `cf` where to find the application—that is, the bits you want to push.

Consider a node app called `nifty-gui`. The `nifty-gui` directory contains a `manifest.yml` file and the bits you want to push—in this case, a file named `nifty-gui.js`.

`manifest.yml` includes a “path” line:

~~~
path: .
~~~

This path correctly directs `cf` to the application when you run `cf` from the `nifty-gui` directory. All is well as long as `manifest.yml` is located there. If you move `manifest.yml` but fail to edit the path line to reflect the change, `cf` can no longer find the application, even if `cf` can still find the manifest.


## <a id='optional-attributes'></a>Optional Attributes ##

This section explains how to describe optional application attributes in manifests. Among the optional attributes, you should notice the differences between symbols, environment variables, and properties.

### <a id='start-commands'></a>The command attribute ###

Depending on your application framework, `cf push` may start your application with a default command.
You can use the `command` attribute to set a custom start command.

For example:

~~~
command: bundle exec rake VERBOSE=true
~~~

### <a id='symbol-objects'></a>The ${random-word} and ${target-base} symbols ###

Though they look like environment variables, `${random-word}` and ``${target-base}`` are actually symbols that `cf` knows how to handle.

You can use a random word for all or part of the host portion of the application URL to make the hostname unique. For example, consider the lines:

~~~
host: ${random-word}
domain: someapp.com
~~~

These generate a URL where the hostname is a random five-character word, similar to:

~~~
zx09e.someapp.com
~~~

The hostname can also combine a ``${random-word}`` symbol with words that do not change. For example, consider the lines

~~~
host: thingtwo-${random-word}
domain: someapp.com
~~~

These generate a URL similar to:

~~~
thingtwo-f8xg3.someapp.com
~~~

Finally, the ``${target-base}`` symbol is useful when you push a single app to multiple Cloud Foundry instances. By definition, each Cloud Foundry instance has its own domain. To spare yourself from having to create a separate manifest for each instance, use the ``${target-base}`` symbol for the domain part of the URL in a single manifest. When you deploy applications to a given Cloud Foundry instance, `cf` replaces the symbol with the correct domain for that instance.

The domain line always looks the same with the ``${target-base}`` symbol:

~~~
domain: ${target-base}
~~~

### <a id='env-block'></a>Environment variables ###

The `env` block consists of a heading, then one or more environment variable/value pairs. The variables belong to the environment of the container to which the application is deployed on the server.

For example:

~~~
env:
  RAILS_ENV: ${rails-env}
  RACK_ENV: ${rails-env}
~~~

While the application is running, you can view, set, and unset environment variables using `cf`:

~~~
cf env <app> <name>
cf set-env <app> <name>
cf unset-env <app> <name>
~~~

Environment variables interact with manifests by somewhat complicated rules:

* When you deploy an application for the first time, `cf` reads the variables described in the environment block of the manifest, and adds them to the environment of the container where the application is deployed.

* When you redeploy, even with the `--reset` option, `cf` ignores the environment block in the manifest.

* When you stop and then restart an application, its environment variables persist.

### <a id='properties-block'></a>Properties ###

The `properties` block consists of a heading, then one or more property/value pairs. The `cf` command line tool evaluates the value of properties at the moment that you run `cf push`.
You can use the properties feature to set values in your manifest that you then use later.

For example:

~~~
properties:
  mode:staging

env:
  EXEC_MODE: ${mode}
  ASSETS_SERVER: server-assets-${mode}
~~~

Properties can be combined with symbols. For example, if you define `myprop1` with the value "frisbee" in the properties block, you could specify a value of ``${myprop1}-${random-word}`` for the host attribute.

### <a id='services-block'></a>Services ###

Applications can use services such as databases, messaging, and key-value stores. Applications deployed into App Spaces where services already exist can bind to those services. If the services defined in a manifest do not yet exist, `cf` creates them and then binds applications to them.

The `services` block consists of a heading, then one or more service descriptions. A service description is a service name, then four key/value pairs. The keys are: `service label`, `provider`, `version`, and `plan`.

For example:

~~~
  services:
    mysql999:
      label: cleardb
      provider: cleardb
      version: n/a
      plan: dev-sandbox
~~~

## <a id='multi-apps'></a>Describing Multiple Applications with One Manifest ##

You can deploy multiple applications with one `cf push` command by describing them in a single manifest. In doing so, you need to pay extra attention to directory structure and path lines in the manifest.

Suppose you want to deploy two applications called respectively spark and flame, and you want `cf` to create and start spark before flame. You accomplish this by listing spark first in the manifest.

In this situation there are two sets of bits you want to push. Let’s say that they are `spark.rb` in the spark directory and `flame.rb` in the flame directory. One level up, the fireplace directory contains the spark and the flame directories along with the `manifest.yml` file. Your plan is to run `cf` from `fireplace`, where you know it can find the manifest.

Now that you have changed the directory structure and manifest location, the standard path line of `path: . ` no longer works. How can you ensure that `cf` finds the bits you want to push?

The answer is to edit each path line to lead `cf` to the correct bits for an application. Assume that `cf` is run from the `fireplace` directory.

For `spark`:

~~~
path: ./spark/
~~~

For `flame`:

~~~
path: ./flame/
~~~

The manifest now consists of two applications blocks.

~~~
---
# this manifest deploys two applications
# apps are in flame and spark directories
# flame and spark are in fireplace
# cf push should be run from fireplace
applications:
- name: spark
  memory: 1G
  instances: 1
  host: flint-${random-word}
  domain: <%=vars.app_domain%>
  path: ./spark/
  services:
    petclinic-mysql:
      label: mysql
      provider: mysql
      version: n/a
      plan: dev-sandbox
- name: flame
  memory: 1G
  instances: 1
  host: burnin1234
  domain: <%=vars.app_domain%>
  path: ./flame/
  services:
    redis:
      label: redis
      provider: redis
      version: n/a
      plan: dev-sandbox
~~~


## <a id='minimize-duplication'></a>Minimizing Duplication ##

In manifests where multiple applications share settings or services, you begin to see content duplicated. While the manifests still work, duplication increases the risk of typographical errors which cause deployment to fail.

The cure for this problem is to “promote” the duplicate content—that is, to move it up above the applications block, where it need appear only once. The promoted content applies to all applications described in the manifest. The manifest becomes shorter, more readable, and more maintainable.

Notice how much content in the manifest below has been promoted in this way.

~~~
---
# all applications use these settings and services
domain: <%=vars.app_domain%>
memory: 1G
instances: 1
services:
  springtime-mysql:
    label: mysql
    provider: mysql
    version: n/a
    plan: dev-sandbox
# specifics of each application
applications:
- name: springtock
  host: tock9876
  path: ./spring-music/build/libs/spring-music.war
- name: springtick
  subdomain: tick-${random-word}
  path: ./spring-music/build/libs/spring-music.war
~~~

In the next example we carry this principle further as we distribute content across multiple manifests.

## <a id='multi-manifests'></a>Multiple Manifests with Inheritance ##

A single manifest can describe multiple applications. Another powerful technique is to create multiple manifests with inheritance. Here, manifests have parent-child relationships such that children inherit descriptions from a parent. Children can use inherited descriptions as-is, extend them, or override them.

This technique helps in these and other scenarios:

* An application has a set of different deployment modes, such as debug, local, and public. Each deployment mode is described in child manifests that extend the settings in a base parent manifest.

* An application is packaged with a basic configuration described by a parent manifest. Users can extend the basic configuration by creating child manifests that add new properties or override those in the parent manifest.

The benefits of multiple manifests with inheritance are similar to those of minimizing duplicated content within single manifests. With inheritance, though, we “promote” content by placing it in the parent manifest.

Every child manifest must contain an “inherit” line that points to the parent manifest. Place the inherit line immediately after the three dashes at the top of the child manifest. For example, every child of a parent manifest called `base-manifest.yml` begins like this:

~~~
---
inherit: base-manifest.yml
~~~

You do not need to add anything to the parent manifest.

In the simple example below, a parent manifest gives each application minimal resources, while a production child manifest scales them up.

**simple-base-manifest.yml**

~~~
---
path: .
domain: <%=vars.app_domain%>
memory: 256M
instances: 1
services:
 singular-mysql:
  label: mysql
  provider: mysql
  version: n/a
  plan: dev-sandbox

# app-specific configuration
applications:
 - name: springtock
   host: springtock333
   path: ./spring-music/build/libs/spring-music.war
 - name: petclinic
   subdomain: petclinic-${random-word}
   path: ./grails-petclinic/target/pets4u-0.1.war
~~~

**simple-prod-manifest.yml**

~~~
---
inherit: simple-base-manifest.yml
applications:
 - name: not-springtock
   memory: 512M
   instances: 1
   host: dontlookatme-${random-word}
   path: ./spring-music/build/libs/spring-music.war
 - name: not-petclinic
   memory: 1G
   instances: 2
   host: meneither-${random-word}
   path: ./grails-petclinic/target/pets4u-0.1.war
~~~

Powerful as it is, inheritance can increase the potential for confusion. It’s a good idea to add comments which explain precisely how the child manifest extends or overrides the descriptions in the parent manifest.



