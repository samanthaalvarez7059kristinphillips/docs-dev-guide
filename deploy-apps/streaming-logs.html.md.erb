---
title: Logging in Cloud Foundry
---

_This page assumes you are using cf v6._

Logs tell you both what your app does and what the system does with your app.
For any one application, logs come from each instance of the app and also from Cloud Foundry system components.
For example, when a Cloud Foundry Router routes an HTTP request to an app, the Router records that event in a log.

Loggregator, the Cloud Foundry component responsible for logging, is configured to keep a limited amount of logging information in memory.
When you want to persist more log information than this, you can drain logs to a third-party log management service.
See [Third-Party Log Management Services](../services/log-management.html).

## <a id='types'></a> Types of Logs ##

In Cloud Foundry, logs that originate in different ways are considered different types of logs.
For example, there are Router logs, Application logs, Cloud Controller logs, and so on.

A three-letter code identifies every log type generated by a Cloud Foundry component.
Some components emit more than one type of log.
Application log messages include the code APP/0 (“app instance zero”) for the first application instance and increment the digit for every instance after that.
In the CLI, these codes appear in the second field of the log message, enclosed in square brackets.

The primary types of logs and their codes are as follows:

<style type="text/css">
.table {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #729ea5;border-collapse: collapse;}
.table th {font-size:12px;background-color:#acc8cc;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:center;}
.table tr {background-color:#d4e3e5;}
.table td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
.table tr:hover {background-color:#ffffff;}
</style>

<table border="1">

	<colgroup>
		<col>
		<col>
		<col>
	</colgroup>
	<tbody>
		<tr>
			<th>
				Origin
			</th>
			<th style="text-align: center;" ">
				Code
			</th>
			<th style="text-align: center;" ">
				Notes
			</th>
		</tr>
		<tr>
			<td>
				Application instance
			</td>
			<td>
				APP/0
			</td>
			<td>
				0 is the first instance, 1 is the second, and so on.
			</td>
		</tr>
		<tr>
			<td>
				Cloud Controller
			</td>
			<td>
				API
			</td>
			<td>
      			The Cloud Controller is responsible for the API.
				Users make API calls to request changes in application state.
			</td>
		</tr>
		<tr>
			<td>
				Staging
			</td>
			<td>
				STG
			</td>
			<td>
				The DEA emits these messages when staging or restaging an app.
				These actions implement the desired state requested by the user.
				Once the droplet has been uploaded, STG messages end and DEA messages begin.
			</td>
		</tr>
		<tr>
			<td>
				Droplet Execution Agent
			</td>
			<td>
				DEA
			</td>
			<td>
				The DEA emits these messages beginning when it starts or stops the app.
				These actions implement the desired state requested by the user.
				The DEA also emits messages when an app crashes.
			</td>
		</tr>
		<tr>
			<td>
				Router
			</td>
			<td>
				RTR
			</td>
			<td>
       			The Router emits these messages when it routes HTTP requests to the application.
			</td>
		</tr>
		<tr>
			<td>
				Loggregator
			</td>
			<td>
				LGR
			</td>
			<td>
       			Loggregator emits these messages to indicate problems with the logging process.
				Examples include "can't reach syslog drain url" and "dropped log messages due to high rate."
			</td>
		</tr>
	</tbody>
</table>

## <a id='view'></a> Viewing Logs in the Command Line Interface ##

You view logs in the CLI using the `cf logs` command.
Tailing, dumping, and filtering are the three main ways to view logs.

**Note**: The log output examples below are edited for brevity.

### <a id="tail-log"></a>Tailing Logs ###

`cf logs <app_name>` displays all of the logging information that Loggregator receives in (almost) real time.
This is equivalent to running the UNIX `tail` command on the logs.

	<pre class="terminal">
	$ cf logs nifty-gui
		Connected, tailing logs for app nifty-gui in org janclouduser / space jancloudspace as admin...
		2014-02-06T12:00:19.44-0800 [API]     OUT Updated app with guid c8612fc2-85b1-464c-92f5-d4a1156eacbf ({"route"=>"2ef5796b-475a-4615-9c71-75bbe277022e"})
		2014-02-06T12:00:27.54-0800 [DEA]     OUT Got staging request for app with id c8612fc2-85b1-464c-92f5-d4a1156eacbf
		2014-02-06T12:00:28.51-0800 [API]     OUT Updated app with guid c8612fc2-85b1-464c-92f5-d4a1156eacbf ({"state"=>"STARTED"})
		2014-02-06T12:00:28.69-0800 [STG]     OUT -----> Downloaded app package (552K)
		2014-02-06T12:00:49.67-0800 [App/0]   ERR [2014-02-06 20:00:49] INFO  WEBrick 1.3.1
		2014-02-06T12:01:15.63-0800 [RTR]     OUT nifty-gui.23.22.211.63.xip.io - [06/02/2014:20:01:15 +0000] "GET / HTTP/1.1" 200 44 "-" "curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8y zlib/1.2.5" 10.180.180.220:39648 response_time:0.019625952 app_id:c8612fc2-85b1-464c-92f5-d4a1156eacbf
	</pre>

Use **Ctrl-C** (^C) to exit the real-time stream.

### <a id="dump-log"></a>Dumping Recent Logs ###

`cf logs <app_name> --recent` displays (or "dumps") all the logging information that Loggregator has in memory at the moment that you run the command.

	<pre class="terminal">
  	$ cf logs --recent nifty-gui
  	Connected, dumping recent logs for app nifty-gui in org janclouduser / space jancloudspace as admin...

  		2014-02-06T11:06:20.70-0800 [RTR]     OUT copy.23.22.211.63.xip.io - [06/02/2014:19:06:20 +0000] "GET / HTTP/1.1" 200 44 "-" "Fabula/1.00 [en] (X11; I; Praefator 3.0.3)" 10.180.180.220:57620 response_time:0.007610524 app_id:9801d83d-709b-45c9-bfdc-2565329dfb9a
  		2014-02-06T11:06:20.70-0800 [App/0]   ERR 204.15.0.254, 10.180.180.220 - - [06/Feb/2014 19:06:20] "GET / HTTP/1.1" 200 44 0.0004
  		2014-02-06T11:06:20.70-0800 [RTR]     OUT copy.23.22.211.63.xip.io - [06/02/2014:19:06:20 +0000] "GET / HTTP/1.1" 200 44 "-" "Fabula/1.00 [en] (X11; I; Praefator 3.0.3)" 10.180.180.220:57625 response_time:0.008446913 app_id:9801d83d-709b-45c9-bfdc-2565329dfb9a
  		2014-02-06T11:06:20.87-0800 [App/0]   ERR 204.15.0.254, 10.180.180.220 - - [06/Feb/2014 19:06:20] "GET / HTTP/1.1" 200 44 0.0005
  		2014-02-06T11:06:20.87-0800 [RTR]     OUT copy.23.22.211.63.xip.io - [06/02/2014:19:06:20 +0000] "GET / HTTP/1.1" 200 44 "-" "Fabula/1.00 [en] (X11; I; Praefator 3.0.3)" 10.180.180.220:57627 response_time:0.006277213 app_id:9801d83d-709b-45c9-bfdc-2565329dfb9a
  		2014-02-06T11:06:20.87-0800 [App/0]   ERR 204.15.0.254, 10.180.180.220 - - [06/Feb/2014 19:06:20] "GET / HTTP/1.1" 200 44 0.0003
	</pre>

### <a id="filter"></a>Filtering Logs ###

Filtering selects some subset of the output of the `cf logs <app_name> --recent` command.

**Note**: The filtering examples below use the Linux `grep` command.
Depending on your operating system and shell, you may need to use a different command or syntax.

* Filter log messages by log type. The possibilities are described in Types of Logs below. Our example filter restricts output to messages from the second instance of an app (APP/1).

	<pre class="terminal">
	$ cf logs nifty-gui --recent | grep App/1
	2014-02-07T10:57:55.88-0800 [App/1]   OUT Express server started
	2014-02-07T10:57:55.88-0800 [App/1]   ERR
	2014-02-07T11:43:01.55-0800 [App/1]   OUT Express server started
	2014-02-07T11:43:01.55-0800 [App/1]   ERR
	</pre>

* Filter log messages by channel. The two possibilities are standard out (`STD`)  and standard error (`ERR`). Our example filters for ERR messages only.

	<pre class="terminal">
	$ cf logs nifty-gui --recent | grep ERR
	2014-02-07T10:54:35.97-0800 [STG]     ERR
	2014-02-07T10:54:46.31-0800 [App/0]   ERR
	2014-02-07T10:57:55.88-0800 [App/1]   ERR
	2014-02-07T11:42:49.86-0800 [STG]     ERR
	2014-02-07T11:43:01.50-0800 [App/0]   ERR
	2014-02-07T11:43:01.55-0800 [App/1]   ERR
	2014-02-07T11:43:01.95-0800 [App/2]   ERR
	</pre>

* Filter log messages by HTTP method. The possibilities depend on your app. Our example filters for HTTP GET events only.

	<pre class="terminal">
	$ cf logs nifty-gui --recent | grep GET
	2014-02-07T11:59:02.25-0800 [RTR]     OUT nifty-gui.<%=vars.app_domain%> - [07/02/2014:19:59:02 +0000] "GET / HTTP/1.1" 200 12 "-" "curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8y zlib/1.2.5" 10.10.2.181:45610 response_time:0.002682034 app_id:4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T10:59:13.13-0800 [RTR]     OUT nifty-gui.<%=vars.app_domain%> - [07/02/2014:18:59:13 +0000] "GET / HTTP/1.1" 200 12 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.107 Safari/537.36" 10.10.66.101:36928 response_time:0.012257917 app_id:4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T10:59:13.29-0800 [RTR]     OUT nifty-gui.<%=vars.app_domain%> - [07/02/2014:18:59:13 +0000] "GET /favicon.ico HTTP/1.1" 404 23 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.107 Safari/537.36" 10.10.66.101:6625 response_time:0.003119610 app_id:4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T11:30:20.03-0800 [RTR]     OUT nifty-gui.<%=vars.app_domain%> - [07/02/2014:19:30:20 +0000] "GET / HTTP/1.1" 200 12 "-" "curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8y zlib/1.2.5" 10.10.66.101:42516 response_time:0.008333640 app_id:4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T11:35:57.28-0800 [RTR]     OUT nifty-gui.<%=vars.app_domain%> - [07/02/2014:19:35:57 +0000] "GET / HTTP/1.1" 200 12 "-" "Wget/1.14 (darwin12.5.0)" 10.10.66.101:12787 response_time:0.005691659 app_id:4d397313-20e0-478a-9a74-307446eb7640
	</pre>

* Filter log messages by timestamp. The possibilities depend on your app. Our example filters for messages emitted between 11:40 and 11:50 in the morning of February 7th, 2014, US Pacific time (indicated by the `-0800`).

	<pre class="terminal">
	$ cf logs nifty-gui --recent | grep 2014-02-07T11:4
	2014-02-07T11:42:21.90-0800 [STG]     OUT -----> Building runtime environment
	2014-02-07T11:42:48.28-0800 [STG]     OUT -----> Uploading droplet (5.6M)
	2014-02-07T11:42:49.55-0800 [DEA]     OUT Starting app instance (index 0) with guid 4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T11:42:49.64-0800 [DEA]     OUT Starting app instance (index 1) with guid 4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T11:42:49.83-0800 [DEA]     OUT Starting app instance (index 2) with guid 4d397313-20e0-478a-9a74-307446eb7640
	2014-02-07T11:42:49.86-0800 [App/0]   OUT Express server started
	2014-02-07T11:42:50.87-0800 [App/0]   ERR
	2014-02-07T11:42:50.87-0800 [App/1]   OUT Express server started
	2014-02-07T11:42:50.87-0800 [App/1]   ERR
	2014-02-07T11:42:51.49-0800 [App/2]   ERR
	2014-02-07T11:42:51.49-0800 [App/2]   OUT Express server started
	</pre>


## <a id="dev"></a>Notes for Developers ##
- Cloud Foundry gathers and stores logs in a best-effort manner.
If clients are unable to consume log lines quickly enough, the buffer of log
lines may become too large.
If this occurs, the system may drop some log messages.
Clients such as a CLI tail or a syslog drain should be able to keep up with the
application log volume.

- Cloud Foundry’s logging capability reports only on the STDOUT and STDERR of
an application, along with other relevant system messages.
An application must write to STDOUT or STDERR instead of a custom log file to
use Cloud Foundry’s logging capabilities. Sending application logs that are
not part of STDOUT or STDERR is not supported.

- Logging output is delivered with an internal timestamp.
This timestamp is assigned when the logging service receives the log line.
Any timestamp already present in a log line is passed as part of the opaque
'message data' and is not processed by the logging system.

- To prevent logging issues, your application should *not* buffer output to
STDOUT or STDERR:

    - For Sinatra, make sure to have this in your configure block:
      <pre class="code">
      $stderr.sync = true
      $stdout.sync = true
      </pre>

    - For Log4J ConsoleAppender, there is no buffering with the default settings. The default setting of the [immediateFlush](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/WriterAppender.html#immediateFlush) option is **true**. If this option is set to **false**, there will likely be some buffering.

    - Logback's [ConsoleAppender](http://logback.qos.ch/manual/appenders.html#ConsoleAppender) buffers by default using an OutputStreamWriter.