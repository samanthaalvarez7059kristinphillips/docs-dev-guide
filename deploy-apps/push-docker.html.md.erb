---
title: Deploy an App with Docker
owner: Diego
---

<strong><%= modified_date %></strong>

This topic describes how to use the 
[Cloud Foundry Command Line Interface (cf CLI)](../../cf-cli/install-go-cli.html) to push an app with a new or updated Docker image. Cloud Foundry then uses the Docker image to create containers for the app.

See the [Using Docker in Cloud Foundry](../../adminguide/docker.html) topic for an explanation of how Docker works in Cloud Foundry.

##<a id='requirements'></a>Requirements

Pushing apps with Docker requires:

* A Cloud Foundry (CF) deployment that has Docker support [enabled](../../adminguide/docker.html#enable).

* The location of a Docker image on [Docker Hub](https://hub.docker.com) or another Docker registry. <% vars.docker_auth1 %> 

* A registry that:
  - Supports the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).
  - Presents a valid certificate for HTTPS traffic.

* That these port numbers match:
  - The [EXPOSE](https://docs.docker.com/engine/reference/builder/#expose) port, set in the image's Dockerfile, for the container to expose.
  - The [PORT](./environment-variable.html#PORT) environment variable set for the app to listen on. If the app does not specify a `PORT`, Cloud Foundry defaults it to `8080`.

##<a id='public'></a>Push a Docker Image From Docker Hub

To deploy a Docker image from a Docker Hub repo, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image REPO/IMAGE:TAG</pre>

Replace the following values in the command above:

* `APP-NAME`: The name of the app being pushed
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of an image from Docker Hub
* `TAG`: (Optional) The tag or version for the image

For example, the following command pushes the `my-image` image from Docker Hub to a Cloud Foundry app:

<pre class='terminal'>$ cf push my-app --docker-image cloudfoundry/my-image</pre>

##<a id='private'></a>Push a Docker Image from a Private Registry

As an alternative to Docker Hub, you can use any Docker image registry that presents a valid certificate for HTTPS traffic, such as a company-internal Docker registry.

To deploy a Docker image using a specified Docker registry, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG
</pre>

Replace values in the command above as follows:

* `APP-NAME`: The name of the app being pushed
* `MY-PRIVATE-REGISTRY.DOMAIN`: The path to the Docker registry
* `PORT`: The port where the registry serves traffic
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of the image being pushed
* `TAG`: (Optional) The tag or version for the image

For example:
 
<pre class='terminal'>$ cf push my-app --docker-image internal-registry.example.com:5000/my-repo/my-image:v2
</pre>

##<a id='private-repo'></a>Push a Docker Image From a Registry with Authentication

Many Docker registries control access to Docker images by authenticating with a username and password. To deploy a Docker image with registry authentication:

1. With the `CF_DOCKER_PASSWORD` environment variable set to the Docker registry user password, run `cf push` with `--docker-image` and `--docker-username`:
  <pre class='terminal'>$ CF\_DOCKER\_PASSWORD=YOUR-PASSWORD cf push APP-NAME --docker-image REPO/IMAGE:TAG --docker-username USER
</pre>
  Replace values in the command above as follows:  
  - `YOUR-PASSWORD`: The password to use for authentication with the registry
  - `APP-NAME`: The name of the app being pushed
  - `REPO`: The repository where the image is stored:
      - For Docker Hub, this is just the repository name
      - For a private registry, this includes the registry address and port, as described in [Push a Docker Image from a Private Registry](#private): `MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO`
  - `IMAGE`: The name of the image being pushed
  - `TAG`: (Optional) The tag or version for the image
  - `USER`: The username to use for authentication with the registry

##<a id='gcr'></a>Push a Docker Image From Google Container Registry (GCR)

<%= vars.product_name %> supports pushing apps from images hosted on Google Container Registry (GCR) service. This feature requires that you use [json_key based authentication](https://cloud.google.com/container-registry/docs/advanced-authentication#using_a_json_key_file).

### Step 1: Authenticate with GCR

To authenticate with GCR using <%= vars.product_name %>, you must create a JSON key file and associate it with your project:

1. Create a GCP service account. See [Creating and Enabling Service Accounts for Instances](https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances).
  <pre class="terminal">
  $ gcloud iam service-accounts create MY-ACCOUNT --display-name "MY DISPLAY NAME"
  </pre>

2. Create a JSON key file and associate it with the service account:
  <pre class="terminal">
    $ gcloud iam service-accounts keys create key.json --iam-account=MY-ACCOUNT<span>@</span>MY-PROJECT-ID.iam.gserviceaccount.com
  </pre>

3. Set your project ID:
  <pre class="terminal">
  $ gcloud config set project MY-PROJECT-ID
  </pre>
4. Add the IAM policy binding for your project and service account:
  <pre class="terminal">
  gcloud projects add-iam-policy-binding MY-PROJECT --member serviceAccount:MY-ACCOUNT<span>@</span>MY-PROJECT-ID.iam.gserviceaccount.com --role roles/storage.objectViewer
  </pre>

### Step 2: Push an App

Push your GCR image using the cf CLI. See the following example: 

<pre class="terminal">$ CF_DOCKER_PASSWORD="$(cat key.json)" cf push APP-NAME --docker-image docker://eu.gcr.io/MY-PROJECT/private --docker-username _json_key
</pre>

<p class="note"><b>Note</b>: The <code>key.json</code> file must point to the file you created in the previous step.</p>


##<a id='volume'></a> Docker Volume Support

Diego supports Docker volumes. 
For more information about enabling volume support, see the [Using an External File System (Volume Services)](../services/using-vol-services.html) topic.
For information about the limitations of NFS volumes, see the [NFS Bosh Volume Release](https://github.com/cloudfoundry-incubator/nfs-volume-release#special-notes-for-docker-image-based-apps).
