---
title: Deploy an App with Docker
owner: Diego
---

<strong><%= modified_date %></strong>

This topic describes how to use the 
[Cloud Foundry Command Line Interface (cf CLI)](../cf-cli/install-go-cli.html) to push an app with a new or updated Docker image. Cloud Foundry then uses the Docker image to create containers for the app.

See the [Using Docker in Cloud Foundry](../../adminguide/docker.html) topic for an explanation of how Docker works in Cloud Foundry.

##<a id='requirements'></a>Requirements

Pushing apps with Docker requires:

* A Cloud Foundry (CF) deployment that has Docker support [enabled](../../adminguide/docker.html#enable).

* The location of a Docker image on [Docker Hub](https://hub.docker.com) or another Docker registry. <% vars.docker_auth1 %> 

* A registry that:
  - Supports the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).
  - Presents a valid certificate for HTTPS traffic.

* That these port numbers match:
  - The [EXPOSE](https://docs.docker.com/engine/reference/builder/#expose) port, set in the image's Dockerfile, for the container to expose.
  - The [PORT](./environment-variable.html#PORT) environment variable set for the app to listen on. If the app does not specify a `PORT`, Cloud Foundry defaults it to `8080`.

##<a id='public'></a>Push a Docker Image From Docker Hub

To deploy a Docker image from a Docker Hub repo, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image REPO/IMAGE:TAG</pre>

Replace the following values in the command above:

* `APP-NAME`: The name of the app being pushed
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of an image from Docker Hub
* `TAG`: (Optional) The tag or version for the image

For example, the following command pushes the `my-image` image from Docker Hub to a Cloud Foundry app:

<pre class='terminal'>$ cf push my-app --docker-image cloudfoundry/my-image</pre>

##<a id='private'></a>Push a Docker Image from a Private Registry

As an alternative to Docker Hub, you can use any Docker image registry that presents a valid certificate for HTTPS traffic, such as a company-internal Docker registry.

To deploy a Docker image using a specified Docker registry, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG
</pre>

Replace values in the command above as follows:

* `APP-NAME`: The name of the app being pushed
* `MY-PRIVATE-REGISTRY.DOMAIN`: The path to the Docker registry
* `PORT`: The port where the registry serves traffic
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of the image being pushed
* `TAG`: (Optional) The tag or version for the image

For example:
 
<pre class='terminal'>$ cf push my-app --docker-image internal-registry.example.com:5000/my-repo/my-image:v2
</pre>

##<a id='private-repo'></a>Push a Docker Image From a Registry with Authentication

Many Docker registries control access to Docker images by authenticating with a username and password. To deploy a Docker image with registry authentication:

1. Set the `CF_DOCKER_PASSWORD` environment variable to the Docker registry user password:
  <pre class='terminal'>$ export CF\_DOCKER\_PASSWORD=yourpassword</pre>

1. Run `cf push` with `--docker-image` and `--docker-username`:
  <pre class='terminal'>$ cf push APP-NAME --docker-image REPO/IMAGE:TAG --docker-username USER
</pre>
  Replace values in the command above as follows:  
  - `APP-NAME`: The name of the app being pushed
  - `REPO`: The repository where the image is stored:
      - For Docker Hub, this is just the repository name
      - For a private registry, this includes the registry address and port, as described in [Push a Docker Image from a Private Registry](#private): `MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO`
  - `IMAGE`: The name of the image being pushed
  - `USER`: The username that should be used for the authentication with the registry
  - `TAG`: (Optional) The tag or version for the image

### <a id='docker-auth'></a> Use cf curl to Push a Docker Image with Authentication

As an alternative to the `cf push` method [above](#private-repo), you can use `cf curl` to push a Docker image from a registry that requires authentication:

1. Target the endpoint of your Cloud Controller.
  <pre class='terminal'>$ cf api api.YOUR-DOMAIN</a>
1. Log in with your credentials.
  <pre class="terminal">$ cf login -u YOUR-USERNAME</pre>
1. Push your Docker image with `curl`:
  <pre class='terminal'>
  $ cf curl /v2/apps -d '{ \
    "name": "APP-NAME", \
    "space\_guid": "YOUR-SPACE-GUID", \
    "docker\_image": "YOUR-DOCKER-IMAGE", \
    "docker\_credentials": { \
      "username": "YOUR-REGISTRY-USERNAME", \
      "password": "YOUR-REGISTRY-PASSWORD" \
      } \
    }
  </pre>
  Replace values in the command above as follows:
  * `APP-NAME`: The name of your application in PCF.
  * `YOUR-SPACE-GUID`: The GUID of the space where you want to push your application. To retrieve the GUID of a space, run `cf space YOUR-SPACE --guid`.
  * `YOUR-DOCKER-IMAGE`: The location of your Docker image, in the format `REPO/IMAGE:TAG` for Docker Hub or `MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG` for a private registry.
  * `YOUR-REGISTRY-USERNAME` and `YOUR-REGISTRY-PASSWORD`: The credentials to authenticate with your Docker registry.

##<a id='volume'></a> Docker Volume Support

Diego supports Docker volumes. 
For more information about enabling volume support, see the [Using an External File System (Volume Services)](../services/using-vol-services.html) topic.
For information about the limitations of NFS volumes, see the [NFS Bosh Volume Release](https://github.com/cloudfoundry-incubator/nfs-volume-release#special-notes-for-docker-image-based-apps).
