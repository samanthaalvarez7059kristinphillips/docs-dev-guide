---
title: Deploying an App with Docker
owner: Diego
---



This topic describes how to use the 
[Cloud Foundry Command Line Interface (cf CLI)](../../cf-cli/install-go-cli.html) to push an app with a new or updated Docker image. Cloud Foundry then uses the Docker image to create containers for the app.

See [Using Docker in Cloud Foundry](https://docs.cloudfoundry.org/adminguide/docker.html) in the Cloud Foundry documentation for an explanation of how Docker works in Cloud Foundry.

##<a id='requirements'></a>Requirements

To push apps with Docker, you need the following:
 
* A Cloud Foundry deployment that has Docker support enabled. To enable Docker support, see the [Enable Docker](https://docs.cloudfoundry.org/adminguide/docker.html#enable) section of _Using Docker in Cloud Foundry_ in the Cloud Foundry documentation.

* A Docker image that meets the following requirements:

  * The Docker image must contain an `/etc/passwd` file with an entry for the `root` user. In addition, the home directory and the shell for that `root` user  must be present in the image file system.

  * The total size of the Docker image file system layers must not exceed the disk quota for the app. The maximum disk allocation for apps is set by the Cloud Controller. The default maximum disk quota is 2048 MB per app.

    <p class="note"><strong>Note</strong>: If the total size of the Docker image file system layers exceeds the disk quota, the app instances do not start.</p>

* The location of the Docker image on [Docker Hub](https://hub.docker.com) or another Docker registry. <% vars.docker_auth1 %>

* A registry that supports the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) and presents a valid certificate for HTTPS traffic.

###<a id='cf-ssh'></a>Requirement for cf ssh Support

If you want to log in to your app container using the <code>cf ssh</code> command, you must make a shell such as <code>sh</code> or <code>bash</code> available in the container. 

The SSH server in the container looks for the following executables in absolute locations or the <code>PATH</code> environment variable:
<ul>
  <li><code>/bin/bash</code></li>
  <li><code>/usr/local/bin/bash</code></li>
  <li><code>/bin/sh</code></li>
  <li><code>bash</code></li>
  <li><code>sh</code></li>
</ul>

## <a id='tag'></a>Benefits of Specifying Tags

If you want your app container to be consistent after platform updates and code changes, specify a tag 
when you push your Docker image. 
Otherwise, the platform applies the <code>latest</code> tag without respecting changes to `PORT` or `ENTRYPOINT`.

If you push your Docker image without specifying a tag, you must run `cf restage` for the changes to take effect.

## <a id='port_config'></a>Port Configuration

By default, apps listen for connections on the port specified in the 
[PORT](environment-variable.html#PORT) 
environment variable for the app. Cloud Foundry allocates this value dynamically.

When configuring a Docker image for Cloud Foundry, you can control the exposed port and 
the corresponding value of `PORT` by specifying the 
[EXPOSE](https://docs.docker.com/engine/reference/builder/#expose) directive in the image Dockerfile. 
If you specify the `EXPOSE` directive, then the corresponding app pushed to Cloud Foundry listens on that 
exposed port. For example, if you set `EXPOSE` to `7070`, then the app listens for connections on port 7070.

If you do not specify a port in the `EXPOSE` directive, then the app listens on the value of the `PORT`
environment variable as determined by Cloud Foundry.
 
If you set the `PORT` environment variable via an `ENV` directive in a Dockerfile, Cloud Foundry overrides 
the value with the system-determined value.

Cloud Foundry supports only one exposed port on the image. 

## <a id='start_command'></a>Start Command

By default, Docker uses the start command specified in the Docker image. You can override
the start command either by using a command-line parameter or by specifying it in a
manifest file.

For more information about command-line parameters for `docker start`, see [docker
start](https://docs.docker.com/engine/reference/commandline/start/) in the Docker Documentation.

##<a id='public'></a>Push a Docker Image From Docker Hub

To deploy a Docker image from a Docker Hub repository, run `cf push APP-NAME --docker-image REPO/IMAGE:TAG`. Replace the placeholder values in the command as follows:

* `APP-NAME`: The name of the app being pushed
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of an image from Docker Hub
* `TAG`: (Optional, recommended) The tag or version for the image

For example, the following command pushes the `my-image` image from Docker Hub to a Cloud Foundry app:

<pre class='terminal'>$ cf push my-app --docker-image cloudfoundry/my-image</pre>

##<a id='private'></a>Push a Docker Image from a Private Registry

As an alternative to Docker Hub, you can use any Docker image registry that presents a valid certificate for HTTPS traffic, such as a company-internal Docker registry.

To deploy a Docker image using a specified Docker registry, run `cf push APP-NAME --docker-image MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG`. Replace the placeholder values in the command as follows:

* `APP-NAME`: The name of the app being pushed
* `MY-PRIVATE-REGISTRY.DOMAIN`: The path to the Docker registry
* `PORT`: The port where the registry serves traffic
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of the image being pushed
* `TAG`: (Optional, but recommended) The tag or version for the image

For example, the following command pushes the `v2` version of the `my-image` image from the `my-repo` repository of the `internal-registry.example.com` registry on port `5000`:

<pre class='terminal'>$ cf push my-app --docker-image internal-registry.example.com:5000/my-repo/my-image:v2
</pre>

##<a id='private-repo'></a>Push a Docker Image From a Registry with Authentication

Many Docker registries control access to Docker images by authenticating with a username and password. Follow the steps below to deploy a Docker image with registry authentication:

1. Make sure the `CF_DOCKER_PASSWORD` environment variable is set to the Docker registry user password.
1. Run the following command: `$ CF_DOCKER_PASSWORD=YOUR-PASSWORD cf push APP-NAME --docker-image REPO/IMAGE:TAG --docker-username USER` 
<br>Replace the placeholder values in the command as follows:
  - `YOUR-PASSWORD`: The password to use for authentication with the registry
  - `APP-NAME`: The name of the app being pushed
  - `REPO`: The repository where the image is stored:
      - For Docker Hub, this is just the repository name
      - For a private registry, this includes the registry address and port, as described in [Push a Docker Image from a Private Registry](#private), in the format: `MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO`
  - `IMAGE`: The name of the image being pushed
  - `TAG`: (Optional, but recommended) The tag or version for the image
  - `USER`: The username to use for authentication with the registry

##<a id='gcr'></a>Push a Docker Image From Google Container Registry (GCR)

<%= vars.product_name %> supports pushing apps from images hosted on Google Container Registry (GCR) service. This feature requires that you use [json_key based authentication](https://cloud.google.com/container-registry/docs/advanced-authentication#using_a_json_key_file).

### Step 1: Authenticate with GCR

To authenticate with GCR using <%= vars.product_name %>, you must create a JSON key file and associate it with your project:

1. Create a GCP service account. See [Creating and Enabling Service Accounts for Instances](https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances). 
  <pre class="terminal">
  $ gcloud iam service-accounts create MY-ACCOUNT --display-name "MY DISPLAY NAME"
  </pre>

2. Create a JSON key file and associate it with the service account:
  <pre class="terminal">
    $ gcloud iam service-accounts keys create key.json --iam-account=MY-ACCOUNT<span>@</span>MY-PROJECT-ID.iam.gserviceaccount.com
  </pre>

3. Set your project ID:
  <pre class="terminal">
  $ gcloud config set project MY-PROJECT-ID
  </pre>
4. Add the IAM policy binding for your project and service account:
  <pre class="terminal">
  gcloud projects add-iam-policy-binding MY-PROJECT --member serviceAccount:MY-ACCOUNT<span>@</span>MY-PROJECT-ID.iam.gserviceaccount.com --role roles/storage.objectViewer
  </pre>

### Step 2: Deploy the GCP Image

Run the following command to deploy your GCR image using the cf CLI: 
`CF_DOCKER_PASSWORD="$(cat key.json)" cf push APP-NAME --docker-image docker://MY-REGISTRY-URL/MY-PROJECT/MY-IMAGE-NAME --docker-username _json_key`
<br>Replace the placeholder values in the command as follows:

- `APP-NAME`: The name of the app being pushed
- `MY-REGISTRY-URL`: The URL of your registry
- `MY-PROJECT`: The name of your project
- `MY-IMAGE-NAME`: The name of your image

<p class="note"><b>Note</b>: The <code>key.json</code> file must point to the file you created in the previous step.</p>

<p class="note"><b>Note</b>: For information about specifying <code>MY-REGISTRY-URL</code>, see <a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling">Pushing and Pulling Images</a> on the Google Cloud documentation.</p>

##<a id='volume'></a> Docker Volume Support
You can use volume services with Docker apps. For more information about enabling volume support, see the [Using an External File System (Volume Services)](../services/using-vol-services.html) topic.
